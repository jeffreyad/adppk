[
  {
    "objectID": "adpc.html",
    "href": "adpc.html",
    "title": "ADPC Template Walkthrough",
    "section": "",
    "text": "The Non-compartmental analysis (NCA) ADaM uses the CDISC Implementation Guide (https://www.cdisc.org/standards/foundational/adam/adamig-non-compartmental-analysis-input-data-v1-0). This example presented uses underlying EX and PC domains where the EX and PC domains represent data as collected and the ADPC ADaM is output. However, the example can be applied to situations where an EC domain is used as input instead of EX and/or ADNCA or another ADaM is created.\nOne of the important aspects of the dataset is the derivation of relative timing variables. These variables consist of nominal and actual times, and refer to the time from first dose or time from most recent reference dose. The reference dose for pre-dose records may be the upcoming dose. The CDISC Implementation Guide makes use of duplicated records for analysis, which allows the same record to be used both with respect to the previous dose and the next upcoming dose. This is illustrated later in this vignette.\nHere are the relative time variables we will use. These correspond to the names in the CDISC Implementation Guide."
  },
  {
    "objectID": "adpc.html#first-load-packages",
    "href": "adpc.html#first-load-packages",
    "title": "ADPC Template Walkthrough",
    "section": "First Load Packages",
    "text": "First Load Packages\nFirst we will load the packages required for our project. We will use {admiral} for the creation of analysis data. {admiral} requires {dplyr}, {lubridate} and {stringr}. We will use {metacore} and {metatools} to store and manipulate metadata from our specifications. We will use {xportr} to perform checks on the final data and export to a transport file.\nThe source SDTM data will come from the CDISC pilot study data stored in {pharmaversesdtm}.\n\n# Load Packages\nlibrary(admiral)\nlibrary(dplyr)\nlibrary(lubridate)\nlibrary(stringr)\nlibrary(metacore)\nlibrary(metatools)\nlibrary(xportr)\nlibrary(pharmaversesdtm)"
  },
  {
    "objectID": "adpc.html#next-load-specifications-for-metacore",
    "href": "adpc.html#next-load-specifications-for-metacore",
    "title": "ADPC Template Walkthrough",
    "section": "Next Load Specifications for Metacore",
    "text": "Next Load Specifications for Metacore\nWe have saved our specifications in an Excel file and will load them into {metacore} with the spec_to_metacore() function. The spec file can be found here.\n\n# ---- Load Specs for Metacore ----\n\nmetacore &lt;- spec_to_metacore(\"pk_spec.xlsx\") %&gt;%\n  select_dataset(\"ADPC\")"
  },
  {
    "objectID": "adpc.html#load-source-datasets",
    "href": "adpc.html#load-source-datasets",
    "title": "ADPC Template Walkthrough",
    "section": "Load Source Datasets",
    "text": "Load Source Datasets\nWe will load are SDTM data from {pharmaversesdtm}. The main components of this will be exposure data from EX and pharmacokinetic concentration data from PC. We will use ADSL for baseline characteristics and we will derive additional baselines from vital signs VS.\n\n# ---- Load source datasets ----\n# Load PC, EX, VS, LB and ADSL\ndata(\"pc\")\ndata(\"ex\")\ndata(\"vs\")\n\ndata(\"admiral_adsl\")\n\nadsl &lt;- admiral_adsl\nex &lt;- convert_blanks_to_na(ex)\npc &lt;- convert_blanks_to_na(pc)\nvs &lt;- convert_blanks_to_na(vs)"
  },
  {
    "objectID": "adpc.html#derivations",
    "href": "adpc.html#derivations",
    "title": "ADPC Template Walkthrough",
    "section": "Derivations",
    "text": "Derivations\n\nDerive PC Dates\nAt this step, it may be useful to join ADSL to your PC and EX domains as well. Only the ADSL variables used for derivations are selected at this step. The rest of the relevant ADSL variables will be added later.\nIn this case we will keep TRTSDT/TRTSDTM for day derivation and TRT01P/TRT01A for planned and actual treatments.\nIn this segment we will use derive_vars_merged() to join the ADSL variables and the following {admiral} functions to derive analysis dates, times and days:\n\nderive_vars_dtm()\nderive_vars_dtm_to_dt()\nderive_vars_dtm_to_tm()\nderive_vars_dy()\n\nWe will also create NFRLT for PC data based on PCTPTNUM. We will create an event ID (EVID) of 0 for concentration records and 1 for dosing records. This is a traditional variable that will provide a handy tool to identify records but will be dropped from the final dataset in this example.\n\n# Get list of ADSL vars required for derivations\nadsl_vars &lt;- exprs(TRTSDT, TRTSDTM, TRT01P, TRT01A)\n\npc_dates &lt;- pc %&gt;%\n  # Join ADSL with PC (need TRTSDT for ADY derivation)\n  derive_vars_merged(\n    dataset_add = adsl,\n    new_vars = adsl_vars,\n    by_vars = exprs(STUDYID, USUBJID)\n  ) %&gt;%\n  # Derive analysis date/time\n  # Impute missing time to 00:00:00\n  derive_vars_dtm(\n    new_vars_prefix = \"A\",\n    dtc = PCDTC,\n    time_imputation = \"00:00:00\"\n  ) %&gt;%\n  # Derive dates and times from date/times\n  derive_vars_dtm_to_dt(exprs(ADTM)) %&gt;%\n  derive_vars_dtm_to_tm(exprs(ADTM)) %&gt;%\n  derive_vars_dy(reference_date = TRTSDT, source_vars = exprs(ADT)) %&gt;%\n  # Derive event ID and nominal relative time from first dose (NFRLT)\n  mutate(\n    EVID = 0,\n    DRUG = PCTEST,\n    NFRLT = if_else(PCTPTNUM &lt; 0, 0, PCTPTNUM), .after = USUBJID\n  )\n\n\n\nGet Dosing Information\nNext we will also join ADSL data with EX and derive dates/times. This section uses the {admiral} functions derive_vars_merged(), derive_vars_dtm(), and derive_vars_dtm_to_dt(). Time is imputed to 00:00:00 here for reasons specific to the sample data. Other imputation times may be used based on study details. Here we create NFRLT for EX data based on VISITDY using the formula (VISITDY - 1) * 24 using dplyr::mutate.\n\nex_dates &lt;- ex %&gt;%\n  derive_vars_merged(\n    dataset_add = adsl,\n    new_vars = adsl_vars,\n    by_vars = exprs(STUDYID, USUBJID)\n  ) %&gt;%\n  # Keep records with nonzero dose\n  filter(EXDOSE &gt; 0) %&gt;%\n  # Add time and set missing end date to start date\n  # Impute missing time to 00:00:00\n  # Note all times are missing for dosing records in this example data\n  # Derive Analysis Start and End Dates\n  derive_vars_dtm(\n    new_vars_prefix = \"AST\",\n    dtc = EXSTDTC,\n    time_imputation = \"00:00:00\"\n  ) %&gt;%\n  derive_vars_dtm(\n    new_vars_prefix = \"AEN\",\n    dtc = EXENDTC,\n    time_imputation = \"00:00:00\"\n  ) %&gt;%\n  # Derive event ID and nominal relative time from first dose (NFRLT)\n  mutate(\n    EVID = 1,\n    NFRLT = 24 * (VISITDY - 1), .after = USUBJID\n  ) %&gt;%\n  # Set missing end dates to start date\n  mutate(AENDTM = case_when(\n    is.na(AENDTM) ~ ASTDTM,\n    TRUE ~ AENDTM\n  )) %&gt;%\n  # Derive dates from date/times\n  derive_vars_dtm_to_dt(exprs(ASTDTM)) %&gt;%\n  derive_vars_dtm_to_dt(exprs(AENDTM))\n\n\n\nExpand Dosing Records\nThe function create_single_dose_dataset() can be used to expand dosing records between the start date and end date. The nominal time will also be expanded based on the values of EXDOSFRQ, for example “QD” will result in nominal time being incremented by 24 hours and “BID” will result in nominal time being incremented by 12 hours. This is a new feature of create_single_dose_dataset().\nDates and times will be derived after expansion using derive_vars_dtm_to_dt() and derive_vars_dtm_to_tm().\nFor this example study we will define analysis visit (AVISIT) based on the nominal day value from NFRLT and give it the format, “Day 1”, “Day 2”, “Day 3”, etc. This is important for creating the BASETYPE variable later. DRUG is created from EXTRT here. This will be useful for linking treatment data with concentration data if there are multiple drugs and/or analytes, but this variable will also be dropped from the final dataset in this example.\n\n# ---- Expand dosing records between start and end dates ----\n# Updated function includes nominal_time parameter\n\nex_exp &lt;- ex_dates %&gt;%\n  create_single_dose_dataset(\n    dose_freq = EXDOSFRQ,\n    start_date = ASTDT,\n    start_datetime = ASTDTM,\n    end_date = AENDT,\n    end_datetime = AENDTM,\n    nominal_time = NFRLT,\n    lookup_table = dose_freq_lookup,\n    lookup_column = CDISC_VALUE,\n    keep_source_vars = exprs(\n      STUDYID, USUBJID, EVID, EXDOSFRQ, EXDOSFRM,\n      NFRLT, EXDOSE, EXDOSU, EXTRT, ASTDT, ASTDTM, AENDT, AENDTM,\n      VISIT, VISITNUM, VISITDY,\n      TRT01A, TRT01P, DOMAIN, EXSEQ, !!!adsl_vars\n    )\n  ) %&gt;%\n  # Derive AVISIT based on nominal relative time\n  # Derive AVISITN to nominal time in whole days using integer division\n  # Define AVISIT based on nominal day\n  mutate(\n    AVISITN = NFRLT %/% 24 + 1,\n    AVISIT = paste(\"Day\", AVISITN),\n    ADTM = ASTDTM,\n    DRUG = EXTRT\n  ) %&gt;%\n  # Derive dates and times from datetimes\n  derive_vars_dtm_to_dt(exprs(ADTM)) %&gt;%\n  derive_vars_dtm_to_tm(exprs(ADTM)) %&gt;%\n  derive_vars_dtm_to_tm(exprs(ASTDTM)) %&gt;%\n  derive_vars_dtm_to_tm(exprs(AENDTM)) %&gt;%\n  derive_vars_dy(reference_date = TRTSDT, source_vars = exprs(ADT))\n\n\n\nFind First Dose\nIn this section we will find the first dose for each subject and drug, using derive_vars_merged(). We also create an analysis visit (AVISIT) based on NFRLT. The first dose datetime for an analyte FANLDTM is calculated as the minimum ADTM from the dosing records by subject and drug.\n\n# ---- Find first dose per treatment per subject ----\n# ---- Join with ADPC data and keep only subjects with dosing ----\n\nadpc_first_dose &lt;- pc_dates %&gt;%\n  derive_vars_merged(\n    dataset_add = ex_exp,\n    filter_add = (EXDOSE &gt; 0 & !is.na(ADTM)),\n    new_vars = exprs(FANLDTM = ADTM),\n    order = exprs(ADTM, EXSEQ),\n    mode = \"first\",\n    by_vars = exprs(STUDYID, USUBJID, DRUG)\n  ) %&gt;%\n  filter(!is.na(FANLDTM)) %&gt;%\n  # Derive AVISIT based on nominal relative time\n  # Derive AVISITN to nominal time in whole days using integer division\n  # Define AVISIT based on nominal day\n  mutate(\n    AVISITN = NFRLT %/% 24 + 1,\n    AVISIT = paste(\"Day\", AVISITN),\n  )\n\n\n\nFind Previous Dose\nUse derive_vars_joined() to find the previous dose data. This will join the expanded EX data with the ADPC based on the analysis date ADTM. Note the filter_join parameter. In addition to the date of the previous dose (ADTM_prev), we also keep the actual dose amount EXDOSE_prev and the analysis visit of the dose AVISIT_prev.\n\n# ---- Find previous dose  ----\n\nadpc_prev &lt;- adpc_first_dose %&gt;%\n  derive_vars_joined(\n    dataset_add = ex_exp,\n    by_vars = exprs(USUBJID),\n    order = exprs(ADTM),\n    new_vars = exprs(\n      ADTM_prev = ADTM, EXDOSE_prev = EXDOSE, AVISIT_prev = AVISIT,\n      AENDTM_prev = AENDTM\n    ),\n    join_vars = exprs(ADTM),\n    join_type = \"all\",\n    filter_add = NULL,\n    filter_join = ADTM &gt; ADTM.join,\n    mode = \"last\",\n    check_type = \"none\"\n  )\n\n\n\nFind Next Dose\nSimilarly, find next dose information using derive_vars_joined() with the filter_join parameter as ADTM &lt;= ADTM.join. Here we keep the next dose analysis date ADTM_next, the next actual dose EXDOSE_next, and the next analysis visit AVISIT_next.\n\n# ---- Find next dose  ----\n\nadpc_next &lt;- adpc_prev %&gt;%\n  derive_vars_joined(\n    dataset_add = ex_exp,\n    by_vars = exprs(USUBJID),\n    order = exprs(ADTM),\n    new_vars = exprs(\n      ADTM_next = ADTM, EXDOSE_next = EXDOSE, AVISIT_next = AVISIT,\n      AENDTM_next = AENDTM\n    ),\n    join_vars = exprs(ADTM),\n    join_type = \"all\",\n    filter_add = NULL,\n    filter_join = ADTM &lt;= ADTM.join,\n    mode = \"first\",\n    check_type = \"none\"\n  )\n\n\n\nFind Previous Nominal Dose\nUse the same method to find the previous and next nominal times. Note that here the data are sorted by nominal time rather than the actual time. This will tell us when the previous dose and the next dose were supposed to occur. Sometimes this will differ from the actual times in a study. Here we keep the previous nominal dose time NFRLT_prev and the next nominal dose time NFRLT_next. Note that the filter_join parameter uses the nominal relative times, e.g. NFRLT &gt; NFRLT.join.\n\n# ---- Find previous nominal dose ----\n\nadpc_nom_prev &lt;- adpc_next %&gt;%\n  derive_vars_joined(\n    dataset_add = ex_exp,\n    by_vars = exprs(USUBJID),\n    order = exprs(NFRLT),\n    new_vars = exprs(NFRLT_prev = NFRLT),\n    join_vars = exprs(NFRLT),\n    join_type = \"all\",\n    filter_add = NULL,\n    filter_join = NFRLT &gt; NFRLT.join,\n    mode = \"last\",\n    check_type = \"none\"\n  )\n\n\n\nFind Next Nominal Time\n\n# ---- Find next nominal time ----\n\nadpc_nom_next &lt;- adpc_nom_prev %&gt;%\n  derive_vars_joined(\n    dataset_add = ex_exp,\n    by_vars = exprs(USUBJID),\n    order = exprs(NFRLT),\n    new_vars = exprs(NFRLT_next = NFRLT),\n    join_vars = exprs(NFRLT),\n    join_type = \"all\",\n    filter_add = NULL,\n    filter_join = NFRLT &lt;= NFRLT.join,\n    mode = \"first\",\n    check_type = \"none\"\n  )\n\n\n\nCombine PC and EX Data\nCombine PC and EX records and derive the additional relative time variables. Often NCA data will keep both dosing and concentration records. We will keep both here. Sometimes you will see ADPC with only the concentration records. If this is desired, the dosing records can be dropped before saving the final dataset. We will use the {admiral} function derive_vars_duration() to calculate the actual relative time from first dose (AFRLT) and the actual relative time from most recent dose (ARRLT). Note that we use the parameter add_one = FALSE here. We will also create a variable representing actual time to next dose (AXRLT) which is not kept, but will be used when we create duplicated records for analysis for the pre-dose records. For now, we will update missing values of ARRLT corresponding to the pre-dose records with AXRLT, and dosing records will be set to zero.\nWe also calculate the reference dates FANLDTM (First Datetime of Dose for Analyte) and PCRFTDTM (Reference Datetime of Dose for Analyte) and their corresponding date and time variables.\nWe calculate the maximum date for concentration records and only keep the dosing records up to that date.\n\n# ---- Combine ADPC and EX data ----\n# Derive Relative Time Variables\n\nadpc_arrlt &lt;- bind_rows(adpc_nom_next, ex_exp) %&gt;%\n  group_by(USUBJID, DRUG) %&gt;%\n  mutate(\n    FANLDTM = min(FANLDTM, na.rm = TRUE),\n    min_NFRLT = min(NFRLT_prev, na.rm = TRUE),\n    maxdate = max(ADT[EVID == 0], na.rm = TRUE), .after = USUBJID\n  ) %&gt;%\n  arrange(USUBJID, ADTM) %&gt;%\n  ungroup() %&gt;%\n  filter(ADT &lt;= maxdate) %&gt;%\n  # Derive Actual Relative Time from First Dose (AFRLT)\n  derive_vars_duration(\n    new_var = AFRLT,\n    start_date = FANLDTM,\n    end_date = ADTM,\n    out_unit = \"hours\",\n    floor_in = FALSE,\n    add_one = FALSE\n  ) %&gt;%\n  # Derive Actual Relative Time from Reference Dose (ARRLT)\n  derive_vars_duration(\n    new_var = ARRLT,\n    start_date = ADTM_prev,\n    end_date = ADTM,\n    out_unit = \"hours\",\n    floor_in = FALSE,\n    add_one = FALSE\n  ) %&gt;%\n  # Derive Actual Relative Time from Next Dose (AXRLT not kept)\n  derive_vars_duration(\n    new_var = AXRLT,\n    start_date = ADTM_next,\n    end_date = ADTM,\n    out_unit = \"hours\",\n    floor_in = FALSE,\n    add_one = FALSE\n  ) %&gt;%\n  mutate(\n    ARRLT = case_when(\n      EVID == 1 ~ 0,\n      is.na(ARRLT) ~ AXRLT,\n      TRUE ~ ARRLT\n    ),\n    # Derive Reference Dose Date\n    PCRFTDTM = case_when(\n      EVID == 1 ~ ADTM,\n      is.na(ADTM_prev) ~ ADTM_next,\n      TRUE ~ ADTM_prev\n    )\n  ) %&gt;%\n  # Derive dates and times from datetimes\n  derive_vars_dtm_to_dt(exprs(FANLDTM)) %&gt;%\n  derive_vars_dtm_to_tm(exprs(FANLDTM)) %&gt;%\n  derive_vars_dtm_to_dt(exprs(PCRFTDTM)) %&gt;%\n  derive_vars_dtm_to_tm(exprs(PCRFTDTM))\n\n\n\nDerive Nominal Reference\nFor nominal relative times we calculate NRRLT generally as NFRLT - NFRLT_prev and NXRLT as NFRLT - NFRLT_next.\n\n# Derive Nominal Relative Time from Reference Dose (NRRLT)\n\nadpc_nrrlt &lt;- adpc_arrlt %&gt;%\n  mutate(\n    NRRLT = case_when(\n      EVID == 1 ~ 0,\n      is.na(NFRLT_prev) ~ NFRLT - min_NFRLT,\n      TRUE ~ NFRLT - NFRLT_prev\n    ),\n    NXRLT = case_when(\n      EVID == 1 ~ 0,\n      TRUE ~ NFRLT - NFRLT_next\n    )\n  )\n\n\n\nDerive Analysis Variables\nUsing dplyr::mutate we derive a number of analysis variables including analysis value (AVAL), analysis time point (ATPT) analysis timepoint reference (ATPTREF) and baseline type (BASETYPE).\nWe set ATPT to PCTPT for concentration records and to “Dose” for dosing records. The analysis timepoint reference ATPTREF will correspond to the dosing visit. We will use AVISIT_prev and AVISIT_next to derive. The baseline type will be a concatenation of ATPTREF and “Baseline” with values such as “Day 1 Baseline”, “Day 2 Baseline”, etc. The baseline flag ABLFL will be set to “Y” for pre-dose records.\nAnalysis value AVAL in this example comes from PCSTRESN for concentration records. In addition we are including the dose value EXDOSE for dosing records and setting BLQ (Below Limit of Quantitation) records to 0 before the first dose and to 1/2 of LLOQ (Lower Limit of Quantitation) for records after first dose. (Additional tests such as whether more than 1/3 of records are BLQ may be required and are not done in this example.) We also create a listing-ready variable AVALCAT1 which includes the “BLQ” record indicator and formats the numeric values to three significant digits.\nWe derive actual dose DOSEA based on EXDOSE_prev and EXDOSE_next and planned dose DOSEP based on the planned treatment TRT01P. In addition we add the units for the dose variables and the relative time variables.\n\n# ---- Derive Analysis Variables ----\n# Derive ATPTN, ATPT, ATPTREF, ABLFL and BASETYPE\n# Derive planned dose DOSEP, actual dose DOSEA and units\n# Derive PARAMCD and relative time units\n# Derive AVAL, AVALU and AVALCAT1\n\nadpc_aval &lt;- adpc_nrrlt %&gt;%\n  mutate(\n    ATPTN = case_when(\n      EVID == 1 ~ 0,\n      TRUE ~ PCTPTNUM\n    ),\n    ATPT = case_when(\n      EVID == 1 ~ \"Dose\",\n      TRUE ~ PCTPT\n    ),\n    ATPTREF = case_when(\n      EVID == 1 ~ AVISIT,\n      is.na(AVISIT_prev) ~ AVISIT_next,\n      TRUE ~ AVISIT_prev\n    ),\n    # Derive baseline flag for pre-dose records\n    ABLFL = case_when(\n      ATPT == \"Pre-dose\" ~ \"Y\",\n      TRUE ~ NA_character_\n    ),\n    # Derive BASETYPE\n    BASETYPE = paste(ATPTREF, \"Baseline\"),\n\n    # Derive Actual Dose\n    DOSEA = case_when(\n      EVID == 1 ~ EXDOSE,\n      is.na(EXDOSE_prev) ~ EXDOSE_next,\n      TRUE ~ EXDOSE_prev\n    ),\n    # Derive Planned Dose\n    DOSEP = case_when(\n      TRT01P == \"Xanomeline High Dose\" ~ 81,\n      TRT01P == \"Xanomeline Low Dose\" ~ 54\n    ),\n    DOSEU = \"mg\",\n  ) %&gt;%\n  # Derive relative time units\n  mutate(\n    FRLTU = \"h\",\n    RRLTU = \"h\",\n    # Derive PARAMCD\n    PARAMCD = coalesce(PCTESTCD, \"DOSE\"),\n    ALLOQ = PCLLOQ,\n    # Derive AVAL\n    AVAL = case_when(\n      EVID == 1 ~ EXDOSE,\n      PCSTRESC == \"&lt;BLQ\" & NFRLT == 0 ~ 0,\n      PCSTRESC == \"&lt;BLQ\" & NFRLT &gt; 0 ~ 0.5 * ALLOQ,\n      TRUE ~ PCSTRESN\n    ),\n    AVALU = case_when(\n      EVID == 1 ~ EXDOSU,\n      TRUE ~ PCSTRESU\n    ),\n    AVALCAT1 = if_else(PCSTRESC == \"&lt;BLQ\", PCSTRESC, prettyNum(signif(AVAL, digits = 3))),\n  ) %&gt;%\n  # Add SRCSEQ\n  mutate(\n    SRCDOM = DOMAIN,\n    SRCVAR = \"SEQ\",\n    SRCSEQ = coalesce(PCSEQ, EXSEQ)\n  )\n\n\n\nDerive DTYPE Copy Records\nAs mentioned above, the CDISC ADaM Implementation Guide for Non-compartmental Analysis uses duplicated records for analysis when a record needs to be used in more than one way. In this example the 24 hour post-dose record will also be used a the pre-dose record for the “Day 2” dose. In addition to 24 hour post-dose records, other situations may include pre-dose records for “Cycle 2 Day 1”, etc.\nIn general, we will select the records of interest and then update the relative time variables for the duplicated records. In this case we will select where the nominal relative time to next dose is zero. (Note that we do not need to duplicate the first dose record since there is no prior dose.)\nDTYPE is set to “COPY” for the duplicated records and the original PCSEQ value is retained. In this case we change “24h Post-dose” to “Pre-dose”. ABLFL is set to “Y” since these records will serve as baseline for the “Day 2” dose. DOSEA is set to EXDOSE_next and PCRFTDTM is set to ADTM_next.\n\n# ---- Create DTYPE copy records ----\n\ndtype &lt;- adpc_aval %&gt;%\n  filter(NFRLT &gt; 0 & NXRLT == 0 & EVID == 0 & !is.na(AVISIT_next)) %&gt;%\n  select(-PCRFTDT, -PCRFTTM) %&gt;%\n  # Re-derive variables in for DTYPE copy records\n  mutate(\n    ABLFL = NA_character_,\n    ATPTREF = AVISIT_next,\n    ARRLT = AXRLT,\n    NRRLT = NXRLT,\n    PCRFTDTM = ADTM_next,\n    DOSEA = EXDOSE_next,\n    BASETYPE = paste(AVISIT_next, \"Baseline\"),\n    ATPT = \"Pre-dose\",\n    ATPTN = NFRLT,\n    ABLFL = \"Y\",\n    DTYPE = \"COPY\"\n  ) %&gt;%\n  derive_vars_dtm_to_dt(exprs(PCRFTDTM)) %&gt;%\n  derive_vars_dtm_to_tm(exprs(PCRFTDTM))\n\n\n\nCombine Original and DTYPE Copy\nNow the duplicated records are combined with the original records. We also derive the modified relative time from reference dose MRRLT. In this case, negative values of ARRLT are set to zero.\nThis is also an opportunity to derive analysis flags e.g. ANL01FL , ANL02FL etc. In this example ANL01FL is set to “Y” for all records and ANL02FL is set to “Y” for all records except the duplicated records with DTYPE = “COPY”. Additional flags may be used to select full profile records and/or to select records included in the tables and figures, etc.\n\n# ---- Combine original records and DTYPE copy records ----\n\nadpc_dtype &lt;- bind_rows(adpc_aval, dtype) %&gt;%\n  arrange(STUDYID, USUBJID, BASETYPE, ADTM, NFRLT) %&gt;%\n  mutate(\n    # Derive MRRLT, ANL01FL and ANL02FL\n    MRRLT = if_else(ARRLT &lt; 0, 0, ARRLT),\n    ANL01FL = \"Y\",\n    ANL02FL = if_else(is.na(DTYPE), \"Y\", NA_character_),\n  )\n\n\n\nDerive BASE and CHG\nThe {admiral} function derive_var_base() is used to derive BASE and the function derive_var_chg() is used to derive change from baseline CHG.\n\n# ---- Derive BASE and Calculate Change from Baseline ----\n\nadpc_base &lt;- adpc_dtype %&gt;%\n  derive_var_base(\n    by_vars = exprs(STUDYID, USUBJID, PARAMCD, BASETYPE),\n    source_var = AVAL,\n    new_var = BASE,\n    filter = ABLFL == \"Y\"\n  )\n\nadpc_chg &lt;- derive_var_chg(adpc_base)\n\n\n\nAdd ASEQ\nWe also now derive ASEQ using derive_var_obs_number() and we drop intermediate variables such as those ending with “_prev” and “_next”.\nFinally we derive PARAM and PARAMN using create_var_from_codelist() from {metatools}.\n\n# ---- Add ASEQ ----\n\nadpc_aseq &lt;- adpc_chg %&gt;%\n  # Calculate ASEQ\n  derive_var_obs_number(\n    new_var = ASEQ,\n    by_vars = exprs(STUDYID, USUBJID),\n    order = exprs(ADTM, BASETYPE, EVID, AVISITN, ATPTN, DTYPE),\n    check_type = \"error\"\n  ) %&gt;%\n  # Derive PARAM and PARAMN using metatools\n  create_var_from_codelist(metacore, input_var = PARAMCD, out_var = PARAM) %&gt;%\n  create_var_from_codelist(metacore, input_var = PARAMCD, out_var = PARAMN)\n\n\n\nDerive Additional Baselines\nHere we derive additional baseline values from VS for baseline height HTBL and weight WTBL and compute the body mass index (BMI) with compute_bmi(). These values could also be obtained from ADVS if available. Baseline lab values could also be derived from LB or ADLB in a similar manner.\n\n#---- Derive additional baselines from VS ----\n\nadpc_baselines &lt;- adpc_aseq %&gt;%\n  derive_vars_merged(\n    dataset_add = vs,\n    filter_add = VSTESTCD == \"HEIGHT\",\n    by_vars = exprs(STUDYID, USUBJID),\n    new_vars = exprs(HTBL = VSSTRESN, HTBLU = VSSTRESU)\n  ) %&gt;%\n  derive_vars_merged(\n    dataset_add = vs,\n    filter_add = VSTESTCD == \"WEIGHT\" & VSBLFL == \"Y\",\n    by_vars = exprs(STUDYID, USUBJID),\n    new_vars = exprs(WTBL = VSSTRESN, WTBLU = VSSTRESU)\n  ) %&gt;%\n  mutate(\n    BMIBL = compute_bmi(height = HTBL, weight = WTBL),\n    BMIBLU = \"kg/m^2\"\n  )\n\n\n\nCombine with ADSL\nIf needed, the other ADSL variables can now be added:\n\n# ---- Add all ADSL variables ----\n\n# Add all ADSL variables\nadpc_prefinal &lt;- adpc_baselines %&gt;%\n  derive_vars_merged(\n    dataset_add = select(adsl, !!!negate_vars(adsl_vars)),\n    by_vars = exprs(STUDYID, USUBJID)\n  )"
  },
  {
    "objectID": "adpc.html#check-data-with-metacore",
    "href": "adpc.html#check-data-with-metacore",
    "title": "ADPC Template Walkthrough",
    "section": "Check Data With Metacore",
    "text": "Check Data With Metacore\nWe use {metacore} to perform a number of checks on the data. We will drop variables not in the specs and make sure all the variables from the specs are included.\n\n# Final Steps, Select final variables and Add labels\n\ndir &lt;- \"./output\"\n\n# Apply metadata and perform associated checks ----\n# uses {metatools}\nadpc &lt;- adpc_prefinal %&gt;%\n  drop_unspec_vars(metacore) %&gt;% # Drop unspecified variables from specs\n  check_variables(metacore) %&gt;% # Check all variables specified are present and no more\n  check_ct_data(metacore) %&gt;% # Checks all variables with CT only contain values within the CT\n  order_cols(metacore) %&gt;% # Orders the columns according to the spec\n  sort_by_key(metacore) # Sorts the rows by the sort keys"
  },
  {
    "objectID": "adpc.html#apply-labels-and-formats-with-xportr",
    "href": "adpc.html#apply-labels-and-formats-with-xportr",
    "title": "ADPC Template Walkthrough",
    "section": "Apply Labels and Formats with xportr",
    "text": "Apply Labels and Formats with xportr\nUsing {xportr} we check variable type, assign variable lenght, add variable labels, add variable formats, and save a transport file.\n\nadpc_xpt &lt;- adpc %&gt;%\n  xportr_type(metacore) %&gt;% # Coerce variable type to match spec\n  xportr_length(metacore) %&gt;% # Assigns SAS length from a variable level metadata\n  xportr_label(metacore) %&gt;% # Assigns variable label from metacore specifications\n  xportr_format(metacore) %&gt;% # Assigns variable format from metacore specifications\n  xportr_df_label(metacore) %&gt;% # Assigns dataset label from metacore specifications\n  xportr_write(file.path(dir, \"adpc.xpt\")) # Write xpt v5 transport file"
  },
  {
    "objectID": "adpc.html#save-final-output",
    "href": "adpc.html#save-final-output",
    "title": "ADPC Template Walkthrough",
    "section": "Save Final Output",
    "text": "Save Final Output\nFinally we save the final output.\n\n# ---- Save output ----\n\nsaveRDS(adpc, file = file.path(dir, \"adpc.rds\"), compress = \"bzip2\")"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "End to End Examples for PK",
    "section": "",
    "text": "This site includes end to end examples for PK using {admiral} and other Pharmaverse tools\n\n{admiral} – Use to build CDISC analysis data\n\n\n\n\n\n\n\n{metacore} – Create and manage metadata for the analysis data\n\n\n\n\n\n\n\n{metatools} – Work with metadata to derive variables and perform checks\n\n\n\n\n\n\n\n{xportr} – Perform checks on data and export to transport file\n\n\n\n\n\n\n\n{pharmaversesdtm} – Sample Pharmaverse CDISC SDTM data"
  },
  {
    "objectID": "adppk.html",
    "href": "adppk.html",
    "title": "ADPPK Template Walkthrough",
    "section": "",
    "text": "The Population PK Analysis Data (ADPPK) follows the CDISC Implementation Guide (https://www.cdisc.org/standards/foundational/adam/basic-data-structure-adam-poppk-implementation-guide-v1-0). Population PK models generally make use of nonlinear mixed effects models that require numeric variables. The data used in the models will include both dosing and concentration records, relative time variables, and numeric covariate variables. A DV or dependent variable is often expected. This is equivalent to the ADaM AVAL variable and will be included in addition to AVAL for ADPPK."
  },
  {
    "objectID": "adppk.html#first-load-packages",
    "href": "adppk.html#first-load-packages",
    "title": "ADPPK Template Walkthrough",
    "section": "First Load Packages",
    "text": "First Load Packages\nFirst we will load the packages required for our project. We will use {admiral} for the creation of analysis data. {admiral} requires {dplyr}, {lubridate} and {stringr}. We will use {metacore} and {metatools} to store and manipulate metadata from our specifications. We will use {xportr} to perform checks on the final data and export to a transport file.\nThe source SDTM data will come from the CDISC pilot study data stored in {pharmaversesdtm}.\n\n# Load Packages\nlibrary(admiral)\nlibrary(dplyr)\nlibrary(lubridate)\nlibrary(stringr)\nlibrary(metacore)\nlibrary(metatools)\nlibrary(xportr)\nlibrary(readr)\nlibrary(pharmaversesdtm)"
  },
  {
    "objectID": "adppk.html#next-load-specifications-for-metacore",
    "href": "adppk.html#next-load-specifications-for-metacore",
    "title": "ADPPK Template Walkthrough",
    "section": "Next Load Specifications for Metacore",
    "text": "Next Load Specifications for Metacore\nWe have saved our specifications in an Excel file and will load them into {metacore} with the spec_to_metacore() function. The spec file can be found here\n\n# ---- Load Specs for Metacore ----\nmetacore &lt;- spec_to_metacore(\"pk_spec.xlsx\") %&gt;%\n  select_dataset(\"ADPPK\")"
  },
  {
    "objectID": "adppk.html#load-source-datasets",
    "href": "adppk.html#load-source-datasets",
    "title": "ADPPK Template Walkthrough",
    "section": "Load Source Datasets",
    "text": "Load Source Datasets\nWe will load are SDTM data from {pharmaversesdtm}. The main components of this will be exposure data from EX and pharmacokinetic concentration data from PC. We will use ADSL for baseline characteristics and we will derive additional baselines from vital signs VS and laboratory data LB.\n\n# ---- Load source datasets ----\n# Load PC, EX, VS, LB and ADSL\ndata(\"pc\")\ndata(\"ex\")\ndata(\"vs\")\ndata(\"lb\")\n\ndata(\"admiral_adsl\")\nadsl &lt;- admiral_adsl\n\nex &lt;- convert_blanks_to_na(ex)\npc &lt;- convert_blanks_to_na(pc)\nvs &lt;- convert_blanks_to_na(vs)\nlb &lt;- convert_blanks_to_na(lb)"
  },
  {
    "objectID": "adppk.html#derivations",
    "href": "adppk.html#derivations",
    "title": "ADPPK Template Walkthrough",
    "section": "Derivations",
    "text": "Derivations\n\nDerive PC Dates\nAt this step, it may be useful to join ADSL to your PC and EX domains as well. Only the ADSL variables used for derivations are selected at this step. The rest of the relevant ADSL variables will be added later.\nIn this case we will keep TRTSDT/TRTSDTM for day derivation and TRT01P/TRT01A for planned and actual treatments.\nIn this segment we will use derive_vars_merged() to join the ADSL variables and the following {admiral} functions to derive analysis dates, times and days:\n\nderive_vars_dtm()\nderive_vars_dtm_to_dt()\nderive_vars_dtm_to_tm()\nderive_vars_dy()\n\nWe will also create NFRLT for PC data based on PCTPTNUM. We will create an event ID (EVID) of 0 for concentration records and 1 for dosing records.\n\n# ---- Derivations ----\n\n# Get list of ADSL vars required for derivations\nadsl_vars &lt;- exprs(TRTSDT, TRTSDTM, TRT01P, TRT01A)\n\npc_dates &lt;- pc %&gt;%\n  # Join ADSL with PC (need TRTSDT for ADY derivation)\n  derive_vars_merged(\n    dataset_add = adsl,\n    new_vars = adsl_vars,\n    by_vars = exprs(STUDYID, USUBJID)\n  ) %&gt;%\n  # Derive analysis date/time\n  # Impute missing time to 00:00:00\n  derive_vars_dtm(\n    new_vars_prefix = \"A\",\n    dtc = PCDTC,\n    time_imputation = \"00:00:00\"\n  ) %&gt;%\n  # Derive dates and times from date/times\n  derive_vars_dtm_to_dt(exprs(ADTM)) %&gt;%\n  derive_vars_dtm_to_tm(exprs(ADTM)) %&gt;%\n  # Derive event ID and nominal relative time from first dose (NFRLT)\n  mutate(\n    EVID = 0,\n    DRUG = PCTEST,\n    NFRLT = if_else(PCTPTNUM &lt; 0, 0, PCTPTNUM), .after = USUBJID\n  )\n\n\n\nGet Dosing Information\nNext we will also join ADSL data with EX and derive dates/times. This section uses the {admiral} functions derive_vars_merged(), derive_vars_dtm(), and derive_vars_dtm_to_dt(). Time is imputed to 00:00:00 here for reasons specific to the sample data. Other imputation times may be used based on study details. Here we create NFRLT for EX data based on VISITDY using the formula (VISITDY - 1) * 24 using dplyr::mutate.\n\n# ---- Get dosing information ----\n\nex_dates &lt;- ex %&gt;%\n  derive_vars_merged(\n    dataset_add = adsl,\n    new_vars = adsl_vars,\n    by_vars = exprs(STUDYID, USUBJID)\n  ) %&gt;%\n  # Keep records with nonzero dose\n  filter(EXDOSE &gt; 0) %&gt;%\n  # Add time and set missing end date to start date\n  # Impute missing time to 00:00:00\n  # Note all times are missing for dosing records in this example data\n  # Derive Analysis Start and End Dates\n  derive_vars_dtm(\n    new_vars_prefix = \"AST\",\n    dtc = EXSTDTC,\n    time_imputation = \"00:00:00\"\n  ) %&gt;%\n  derive_vars_dtm(\n    new_vars_prefix = \"AEN\",\n    dtc = EXENDTC,\n    time_imputation = \"00:00:00\"\n  ) %&gt;%\n  # Derive event ID and nominal relative time from first dose (NFRLT)\n  mutate(\n    EVID = 1,\n    NFRLT = 24 * (VISITDY - 1), .after = USUBJID\n  ) %&gt;%\n  # Set missing end dates to start date\n  mutate(AENDTM = case_when(\n    is.na(AENDTM) ~ ASTDTM,\n    TRUE ~ AENDTM\n  )) %&gt;%\n  # Derive dates from date/times\n  derive_vars_dtm_to_dt(exprs(ASTDTM)) %&gt;%\n  derive_vars_dtm_to_dt(exprs(AENDTM))\n\n\n\nExpand Dosing Records\nThe {admiral} function create_single_dose_dataset() will be used to expand dosing records between the start date and end date. The nominal time will also be expanded based on the values of EXDOSFRQ, for example “QD” will result in nominal time being incremented by 24 hours and “BID” will result in nominal time being incremented by 12 hours.\n\n# ---- Expand dosing records between start and end dates ----\n# Updated function includes nominal_time parameter\n\nex_exp &lt;- ex_dates %&gt;%\n  create_single_dose_dataset(\n    dose_freq = EXDOSFRQ,\n    start_date = ASTDT,\n    start_datetime = ASTDTM,\n    end_date = AENDT,\n    end_datetime = AENDTM,\n    nominal_time = NFRLT,\n    lookup_table = dose_freq_lookup,\n    lookup_column = CDISC_VALUE,\n    keep_source_vars = exprs(\n      STUDYID, USUBJID, EVID, EXDOSFRQ, EXDOSFRM,\n      NFRLT, EXDOSE, EXDOSU, EXTRT, ASTDT, ASTDTM, AENDT, AENDTM,\n      VISIT, VISITNUM, VISITDY,\n      TRT01A, TRT01P, DOMAIN, EXSEQ, !!!adsl_vars\n    )\n  ) %&gt;%\n  # Derive AVISIT based on nominal relative time\n  # Derive AVISITN to nominal time in whole days using integer division\n  # Define AVISIT based on nominal day\n  mutate(\n    AVISITN = NFRLT %/% 24 + 1,\n    AVISIT = paste(\"Day\", AVISITN),\n    ADTM = ASTDTM,\n    DRUG = EXTRT\n  ) %&gt;%\n  # Derive dates and times from datetimes\n  derive_vars_dtm_to_dt(exprs(ADTM)) %&gt;%\n  derive_vars_dtm_to_tm(exprs(ADTM)) %&gt;%\n  derive_vars_dtm_to_tm(exprs(ASTDTM)) %&gt;%\n  derive_vars_dtm_to_tm(exprs(AENDTM))\n\n\n\nFind First Dose\nWe find the first dose for the concentration records using the {admiral} function derive_vars_merged()\n\n# ---- Find first dose per treatment per subject ----\n# ---- Join with ADPPK data and keep only subjects with dosing ----\n\nadppk_first_dose &lt;- pc_dates %&gt;%\n  derive_vars_merged(\n    dataset_add = ex_exp,\n    filter_add = (!is.na(ADTM)),\n    new_vars = exprs(FANLDTM = ADTM, EXDOSE_first = EXDOSE),\n    order = exprs(ADTM, EXSEQ),\n    mode = \"first\",\n    by_vars = exprs(STUDYID, USUBJID, DRUG)\n  ) %&gt;%\n  filter(!is.na(FANLDTM)) %&gt;%\n  # Derive AVISIT based on nominal relative time\n  # Derive AVISITN to nominal time in whole days using integer division\n  # Define AVISIT based on nominal day\n  mutate(\n    AVISITN = NFRLT %/% 24 + 1,\n    AVISIT = paste(\"Day\", AVISITN),\n  )\n\n\n\nFind Previous Dose\nFor ADPPK we will find the previous dose with respect to actual time and nominal time. We will use `derive_vars_joined().\n\n# ---- Find previous dose  ----\n\nadppk_prev &lt;- adppk_first_dose %&gt;%\n  derive_vars_joined(\n    dataset_add = ex_exp,\n    by_vars = exprs(USUBJID),\n    order = exprs(ADTM),\n    new_vars = exprs(\n      ADTM_prev = ADTM, EXDOSE_prev = EXDOSE, AVISIT_prev = AVISIT,\n      AENDTM_prev = AENDTM\n    ),\n    join_vars = exprs(ADTM),\n    join_type = \"all\",\n    filter_add = NULL,\n    filter_join = ADTM &gt; ADTM.join,\n    mode = \"last\",\n    check_type = \"none\"\n  )\n\n\n\nFind Previous Nominal Dose\n\n# ---- Find previous nominal dose ----\n\nadppk_nom_prev &lt;- adppk_prev %&gt;%\n  derive_vars_joined(\n    dataset_add = ex_exp,\n    by_vars = exprs(USUBJID),\n    order = exprs(NFRLT),\n    new_vars = exprs(NFRLT_prev = NFRLT),\n    join_type = \"all\",\n    join_vars = exprs(NFRLT),\n    filter_add = NULL,\n    filter_join = NFRLT &gt; NFRLT.join,\n    mode = \"last\",\n    check_type = \"none\"\n  )\n\n\n\nCombine PC and EX Data\nHere we combine PC and EX records. We will derive the relative time variables AFRLT (Actual Relative Time from First Dose), APRLT (Actual Relative Time from Previous Dose), and NPRLT (Nominal Relative Time from Previous Dose). Use derive_vars_duration() to derive AFRLT and APRLT. Note we defined EVID above with values of 0 for observation records and 1 for dosing records.\n\n# ---- Combine ADPPK and EX data ----\n# Derive Relative Time Variables\n\nadppk_aprlt &lt;- bind_rows(adppk_nom_prev, ex_exp) %&gt;%\n  group_by(USUBJID, DRUG) %&gt;%\n  mutate(\n    FANLDTM = min(FANLDTM, na.rm = TRUE),\n    min_NFRLT = min(NFRLT, na.rm = TRUE),\n    maxdate = max(ADT[EVID == 0], na.rm = TRUE), .after = USUBJID\n  ) %&gt;%\n  arrange(USUBJID, ADTM) %&gt;%\n  ungroup() %&gt;%\n  filter(ADT &lt;= maxdate) %&gt;%\n  # Derive Actual Relative Time from First Dose (AFRLT)\n  derive_vars_duration(\n    new_var = AFRLT,\n    start_date = FANLDTM,\n    end_date = ADTM,\n    out_unit = \"hours\",\n    floor_in = FALSE,\n    add_one = FALSE\n  ) %&gt;%\n  # Derive Actual Relative Time from Reference Dose (APRLT)\n  derive_vars_duration(\n    new_var = APRLT,\n    start_date = ADTM_prev,\n    end_date = ADTM,\n    out_unit = \"hours\",\n    floor_in = FALSE,\n    add_one = FALSE\n  ) %&gt;%\n  # Derive APRLT\n  mutate(\n    APRLT = case_when(\n      EVID == 1 ~ 0,\n      is.na(APRLT) ~ AFRLT,\n      TRUE ~ APRLT\n    ),\n    NPRLT = case_when(\n      EVID == 1 ~ 0,\n      is.na(NFRLT_prev) ~ NFRLT - min_NFRLT,\n      TRUE ~ NFRLT - NFRLT_prev\n    )\n  )\n\n\n\nDerive Analysis Variables\nThe expected analysis variable for ADPPK is DV or dependent variable. For this example DV is set to the numeric concentration value PCSTRESN. We will also include AVAL equivalent to DV for consistency with CDISC ADaM standards. MDV missing dependent variable will also be included.\n\n# ---- Derive Analysis Variables ----\n# Derive actual dose DOSEA and planned dose DOSEP,\n# Derive AVAL and DV\n\nadppk_aval &lt;- adppk_aprlt %&gt;%\n  mutate(\n    # Derive Actual Dose\n    DOSEA = case_when(\n      EVID == 1 ~ EXDOSE,\n      is.na(EXDOSE_prev) ~ EXDOSE_first,\n      TRUE ~ EXDOSE_prev\n    ),\n    # Derive Planned Dose\n    DOSEP = case_when(\n      TRT01P == \"Xanomeline High Dose\" ~ 81,\n      TRT01P == \"Xanomeline Low Dose\" ~ 54,\n      TRT01P == \"Placebo\" ~ 0\n    ),\n    # Derive PARAMCD\n    PARAMCD = case_when(\n      EVID == 1 ~ \"DOSE\",\n      TRUE ~ PCTESTCD\n    ),\n    ALLOQ = PCLLOQ,\n    # Derive CMT\n    CMT = case_when(\n      EVID == 1 ~ 1,\n      TRUE ~ 2\n    ),\n    # Derive BLQFL/BLQFN\n    BLQFL = case_when(\n      PCSTRESC == \"&lt;BLQ\" ~ \"Y\",\n      TRUE ~ \"N\"\n    ),\n    BLQFN = case_when(\n      PCSTRESC == \"&lt;BLQ\" ~ 1,\n      TRUE ~ 0\n    ),\n    AMT = case_when(\n      EVID == 1 ~ EXDOSE,\n      TRUE ~ NA_real_\n    ),\n    # Derive DV and AVAL\n    DV = PCSTRESN,\n    DVID = PCTESTCD,\n    AVAL = DV,\n    DVL = case_when(\n      DV != 0 ~ log(DV),\n      TRUE ~ NA_real_\n    ),\n    # Derive MDV\n    MDV = case_when(\n      EVID == 1 ~ 1,\n      is.na(DV) ~ 1,\n      TRUE ~ 0\n    ),\n    AVALU = case_when(\n      EVID == 1 ~ NA_character_,\n      TRUE ~ PCSTRESU\n    ),\n    RLTU = \"h\",\n    USTRESC = PCSTRESC,\n    UDTC = format_ISO8601(ADTM),\n    II = if_else(EVID == 1, 1, 0),\n    SS = if_else(EVID == 1, 1, 0),\n    ADDL = 0,\n    OCC = 1,\n  )\n\n\n\nAdd ASEQ\nWe add a sequence variable using the {admiral} function derive_var_obs_number().\n\n# ---- Add ASEQ ----\n\nadppk_aseq &lt;- adppk_aval %&gt;%\n  # Calculate ASEQ\n  derive_var_obs_number(\n    new_var = ASEQ,\n    by_vars = exprs(STUDYID, USUBJID),\n    order = exprs(AFRLT, EVID),\n    check_type = \"error\"\n  ) %&gt;%\n  mutate(\n    PROJID = DRUG,\n    PROJIDN = 1,\n    PART = 1,\n  )"
  },
  {
    "objectID": "adppk.html#derive-covariates-using-metacore",
    "href": "adppk.html#derive-covariates-using-metacore",
    "title": "ADPPK Template Walkthrough",
    "section": "Derive Covariates Using Metacore",
    "text": "Derive Covariates Using Metacore\nIn this step we will create our numeric covariates using the create_var_from_codelist() function from {metatools}.\n\n#---- Derive Covariates ----\n# Include numeric values for STUDYIDN, USUBJIDN, SEXN, RACEN etc.\n\ncovar &lt;- adsl %&gt;%\n  create_var_from_codelist(metacore, input_var = STUDYID, out_var = STUDYIDN) %&gt;%\n  create_var_from_codelist(metacore, input_var = SEX, out_var = SEXN) %&gt;%\n  create_var_from_codelist(metacore, input_var = RACE, out_var = RACEN) %&gt;%\n  create_var_from_codelist(metacore, input_var = ETHNIC, out_var = AETHNIC) %&gt;%\n  create_var_from_codelist(metacore, input_var = AETHNIC, out_var = AETHNICN) %&gt;%\n  create_var_from_codelist(metacore, input_var = ARMCD, out_var = COHORT) %&gt;%\n  create_var_from_codelist(metacore, input_var = ARMCD, out_var = COHORTC) %&gt;%\n  create_var_from_codelist(metacore, input_var = COUNTRY, out_var = COUNTRYN) %&gt;%\n  create_var_from_codelist(metacore, input_var = COUNTRY, out_var = COUNTRYL) %&gt;%\n  mutate(\n    STUDYIDN = as.numeric(word(USUBJID, 1, sep = fixed(\"-\"))),\n    SITEIDN = as.numeric(word(USUBJID, 2, sep = fixed(\"-\"))),\n    USUBJIDN = as.numeric(word(USUBJID, 3, sep = fixed(\"-\"))),\n    SUBJIDN = as.numeric(SUBJID),\n    ROUTE = unique(ex$EXROUTE),\n    FORM = unique(ex$EXDOSFRM),\n    REGION1 = COUNTRY,\n    REGION1N = COUNTRYN,\n    SUBJTYPC = \"Volunteer\",\n  ) %&gt;%\n  create_var_from_codelist(metacore, input_var = FORM, out_var = FORMN) %&gt;%\n  create_var_from_codelist(metacore, input_var = ROUTE, out_var = ROUTEN) %&gt;%\n  create_var_from_codelist(metacore, input_var = SUBJTYPC, out_var = SUBJTYP)\n\n\nDerive Additional Baselines\nNext we add additional baselines from vital signs and laboratory data. We will use the {admiral} functions derive_vars_merged() and derive_vars_transposed() to add these.\n\n#---- Derive additional baselines from VS and LB ----\n\nlabsbl &lt;- lb %&gt;%\n  filter(LBBLFL == \"Y\" & LBTESTCD %in% c(\"CREAT\", \"ALT\", \"AST\", \"BILI\")) %&gt;%\n  mutate(LBTESTCDB = paste0(LBTESTCD, \"BL\")) %&gt;%\n  select(STUDYID, USUBJID, LBTESTCDB, LBSTRESN)\n\ncovar_vslb &lt;- covar %&gt;%\n  derive_vars_merged(\n    dataset_add = vs,\n    filter_add = VSTESTCD == \"HEIGHT\",\n    by_vars = exprs(STUDYID, USUBJID),\n    new_vars = exprs(HTBL = VSSTRESN)\n  ) %&gt;%\n  derive_vars_merged(\n    dataset_add = vs,\n    filter_add = VSTESTCD == \"WEIGHT\" & VSBLFL == \"Y\",\n    by_vars = exprs(STUDYID, USUBJID),\n    new_vars = exprs(WTBL = VSSTRESN)\n  ) %&gt;%\n  derive_vars_transposed(\n    dataset_merge = labsbl,\n    by_vars = exprs(STUDYID, USUBJID),\n    key_var = LBTESTCDB,\n    value_var = LBSTRESN\n  ) %&gt;%\n  mutate(\n    BMIBL = compute_bmi(height = HTBL, weight = WTBL),\n    BSABL = compute_bsa(\n      height = HTBL,\n      weight = HTBL,\n      method = \"Mosteller\"\n    ),\n    CRCLBL = compute_egfr(\n      creat = CREATBL, creatu = \"SI\", age = AGE, weight = WTBL, sex = SEX,\n      method = \"CRCL\"\n    ),\n    EGFRBL = compute_egfr(\n      creat = CREATBL, creatu = \"SI\", age = AGE, weight = WTBL, sex = SEX,\n      method = \"CKD-EPI\"\n    )\n  ) %&gt;%\n  rename(TBILBL = BILIBL)\n\n\n\nCombine with Covariates\nWe combine our covariates with the rest of the data\n\n# Combine covariates with APPPK data\n\nadppk_prefinal &lt;- adppk_aseq %&gt;%\n  derive_vars_merged(\n    dataset_add = select(covar_vslb, !!!negate_vars(adsl_vars)),\n    by_vars = exprs(STUDYID, USUBJID)\n  ) %&gt;%\n  arrange(STUDYIDN, USUBJIDN, AFRLT, EVID) %&gt;%\n  # Add RECSEQ\n  # Exclude records if needed\n  mutate(\n    RECSEQ = row_number(),\n    EXCLFCOM = \"None\"\n  ) %&gt;%\n  create_var_from_codelist(metacore, input_var = DVID, out_var = DVIDN) %&gt;%\n  create_var_from_codelist(metacore, input_var = EXCLFCOM, out_var = EXCLF)"
  },
  {
    "objectID": "adppk.html#check-data-with-metacore",
    "href": "adppk.html#check-data-with-metacore",
    "title": "ADPPK Template Walkthrough",
    "section": "Check Data With Metacore",
    "text": "Check Data With Metacore\nWe use {metacore} to perform a number of checks on the data. We will drop variables not in the specs and make sure all the variables from the specs are included.\n\n# Final Steps, Select final variables and Add labels\n# This process will be based on your metadata, no example given for this reason\n# ...\ndir &lt;- \"./output\"\n\n# Apply metadata and perform associated checks ----\n# uses {metatools}\n\nadppk &lt;- adppk_prefinal %&gt;%\n  drop_unspec_vars(metacore) %&gt;% # Drop unspecified variables from specs\n  check_variables(metacore) %&gt;% # Check all variables specified are present and no more\n  check_ct_data(metacore) %&gt;% # Checks all variables with CT only contain values within the CT\n  order_cols(metacore) %&gt;% # Orders the columns according to the spec\n  sort_by_key(metacore) # Sorts the rows by the sort keys"
  },
  {
    "objectID": "adppk.html#apply-labels-and-formats-with-xportr",
    "href": "adppk.html#apply-labels-and-formats-with-xportr",
    "title": "ADPPK Template Walkthrough",
    "section": "Apply Labels and Formats with xportr",
    "text": "Apply Labels and Formats with xportr\nUsing {xportr} we check variable type, assign variable lenght, add variable labels, add variable formats, and save a transport file.\n\nadppk_xpt &lt;- adppk %&gt;%\n  xportr_type(metacore) %&gt;% # Coerce variable type to match spec\n  xportr_length(metacore) %&gt;% # Assigns SAS length from a variable level metadata\n  xportr_label(metacore) %&gt;% # Assigns variable label from metacore specifications\n  xportr_format(metacore) %&gt;% # Assigns variable format from metacore specifications\n  xportr_df_label(metacore) %&gt;% # Assigns dataset label from metacore specifications\n  xportr_write(file.path(dir, \"adppk.xpt\")) # Write xpt v5 transport file"
  },
  {
    "objectID": "adppk.html#save-final-output",
    "href": "adppk.html#save-final-output",
    "title": "ADPPK Template Walkthrough",
    "section": "Save Final Output",
    "text": "Save Final Output\nFinally we save the final output. We will also create a CSV file for the modeler.\n\n# ---- Save output ----\nsaveRDS(adppk, file = file.path(dir, \"adppk.rds\"), compress = \"bzip2\")\n\n# Write CSV\nwrite_csv(adppk_xpt, \"./output/adppk.csv\")"
  },
  {
    "objectID": "phuse_poster.html#abstract",
    "href": "phuse_poster.html#abstract",
    "title": "Population Pharmacokinetic Analysis Data (ADPPK) Programming in {admiral} and the Pharmaverse",
    "section": "Abstract",
    "text": "Abstract\nPopulation Pharmacokinetic modeling is an important tool for drug development. The CDISC ADaM Population PK Implementation Guide is forthcoming. Population PK models generally make use of nonlinear mixed effects models that require numeric variables. The data used in the models will include both dosing and concentration records, relative time variables, and numeric covariate variables. {admiral} is an open-source R package for creating CDISC ADaM data. It can be used effectively to create Population PK analysis data (ADPPK). Additional tools from other Pharmaverse packages such as {metacore}, {metatools} and {xportr} can be used to simplify the workflow. I will discuss some of the challenges of Population Pharmacokinetic analysis data programming and show some of the solutions developed in {admiral} and the Pharmaverse."
  },
  {
    "objectID": "phuse_poster.html#agenda",
    "href": "phuse_poster.html#agenda",
    "title": "Population Pharmacokinetic Analysis Data (ADPPK) Programming in {admiral} and the Pharmaverse",
    "section": "Agenda",
    "text": "Agenda\n\nWhat is PK data\nTypes of PK analysis data\nBrief overview of {admiral} and the Pharmaverse\nProgramming Workflow\nSome Additional Pharmaverse tools\nPharmaverse Website Example"
  },
  {
    "objectID": "phuse_poster.html#pharmacokinetics-overview",
    "href": "phuse_poster.html#pharmacokinetics-overview",
    "title": "Population Pharmacokinetic Analysis Data (ADPPK) Programming in {admiral} and the Pharmaverse",
    "section": "Pharmacokinetics Overview",
    "text": "Pharmacokinetics Overview\n\n\nPharmacokinetics is the interaction of a drug with the body\nSamples collected at regular time intervals after dosing\nMetrics calculated from concentrations over time"
  },
  {
    "objectID": "phuse_poster.html#two-main-types-of-modelling",
    "href": "phuse_poster.html#two-main-types-of-modelling",
    "title": "Population Pharmacokinetic Analysis Data (ADPPK) Programming in {admiral} and the Pharmaverse",
    "section": "Two Main Types of Modelling",
    "text": "Two Main Types of Modelling\n\nNon-Compartmental Analysis (NCA)\nPopulation PK (PopPK)"
  },
  {
    "objectID": "phuse_poster.html#population-pk-poppk-adppk",
    "href": "phuse_poster.html#population-pk-poppk-adppk",
    "title": "Population Pharmacokinetic Analysis Data (ADPPK) Programming in {admiral} and the Pharmaverse",
    "section": "Population PK (PopPK) – ADPPK",
    "text": "Population PK (PopPK) – ADPPK\n\nPopulation Based\nLess Intensive Sampling\nCan Detect Variations based on Covariates"
  },
  {
    "objectID": "phuse_poster.html#cdisc-standards-for-population-pk-analysis",
    "href": "phuse_poster.html#cdisc-standards-for-population-pk-analysis",
    "title": "Population Pharmacokinetic Analysis Data (ADPPK) Programming in {admiral} and the Pharmaverse",
    "section": "CDISC Standards for Population PK Analysis",
    "text": "CDISC Standards for Population PK Analysis\n\nPublished October 6, 2023!\nhttps://www.cdisc.org/standards/foundational/adam/basic-data-structure-adam-poppk-implementation-guide-v1-0"
  },
  {
    "objectID": "phuse_poster.html#cdisc-adam-pk-standards",
    "href": "phuse_poster.html#cdisc-adam-pk-standards",
    "title": "Population Pharmacokinetic Analysis Data (ADPPK) Programming in {admiral} and the Pharmaverse",
    "section": "CDISC ADaM PK Standards",
    "text": "CDISC ADaM PK Standards\n\nADNCA (NCA) – released November 2021\nADPPK (PopPK) – released October 2023\nADPP (PK Parameters) – coming in 2024"
  },
  {
    "objectID": "phuse_poster.html#characteristics-of-pk-analysis-data",
    "href": "phuse_poster.html#characteristics-of-pk-analysis-data",
    "title": "Population Pharmacokinetic Analysis Data (ADPPK) Programming in {admiral} and the Pharmaverse",
    "section": "Characteristics of PK Analysis Data",
    "text": "Characteristics of PK Analysis Data\n\nIncludes both exposure (EX) and concentration data (PC)\nIncludes nominal and actual relative time variables\nDuplicated Records for Analysis (ADNCA)\nNumeric Covariates for Modelling (ADPPK)\nMay need to expand dosing records"
  },
  {
    "objectID": "phuse_poster.html#time-variables-adppk",
    "href": "phuse_poster.html#time-variables-adppk",
    "title": "Population Pharmacokinetic Analysis Data (ADPPK) Programming in {admiral} and the Pharmaverse",
    "section": "Time Variables (ADPPK)",
    "text": "Time Variables (ADPPK)\n\n\n\nVariable\nVariable Label\n\n\n\n\nNFRLT\nNominal Rel Time from First Dose\n\n\nAFRLT\nActual Rel Time from First Dose\n\n\nNPRLT\nNominal Rel Time from Previous Dose\n\n\nAPRLT\nActual Rel Time from Previous Dose"
  },
  {
    "objectID": "phuse_poster.html#time-variables-example",
    "href": "phuse_poster.html#time-variables-example",
    "title": "Population Pharmacokinetic Analysis Data (ADPPK) Programming in {admiral} and the Pharmaverse",
    "section": "Time Variables Example",
    "text": "Time Variables Example\n\n\n\nUSUBJID\nEVID\nNFRLT\nAFRLT\nNPRLT\nARRLT\n\n\n\n\n001\n0\n0\n-0.05\n0\n-0.05\n\n\n001\n1\n0\n0\n0\n0\n\n\n001\n0\n0.5\n0.465\n0.5\n0.465\n\n\n001\n0\n3\n2.89\n3\n2.89\n\n\n001\n1\n24\n24.05\n0\n0\n\n\n001\n0\n25\n25.15\n1\n1.15"
  },
  {
    "objectID": "phuse_poster.html#adppk-expected-variables",
    "href": "phuse_poster.html#adppk-expected-variables",
    "title": "Population Pharmacokinetic Analysis Data (ADPPK) Programming in {admiral} and the Pharmaverse",
    "section": "ADPPK Expected Variables",
    "text": "ADPPK Expected Variables\n\nEVID Event ID\nDV Dependent Variable\nMDV Missing Dependent Variable\nBLQ Below Limit of Quantitation"
  },
  {
    "objectID": "phuse_poster.html#adppk-covariates",
    "href": "phuse_poster.html#adppk-covariates",
    "title": "Population Pharmacokinetic Analysis Data (ADPPK) Programming in {admiral} and the Pharmaverse",
    "section": "ADPPK Covariates",
    "text": "ADPPK Covariates\n\n&lt;COV&gt;BL for baseline covariate, (e.g., WTBL, BMIBL)\n&lt;COV&gt;N for numerical version of categorical covariate (e.g., SEXN, RACEN)\n&lt;COV&gt;I for any covariates with imputed values (e.g., WTI, BMII)\n&lt;COV&gt;GRy for grouping covariates (e.g. AGEGR1)"
  },
  {
    "objectID": "phuse_poster.html#admiral",
    "href": "phuse_poster.html#admiral",
    "title": "Population Pharmacokinetic Analysis Data (ADPPK) Programming in {admiral} and the Pharmaverse",
    "section": "{admiral}",
    "text": "{admiral}\n\n\nADaM in R Asset Library\n{admiral} is Open Source and Collaborative\n{admiral} is Modular\n{admiral} is Part of Pharmaverse\n\nhttps://github.com/pharmaverse/admiral"
  },
  {
    "objectID": "phuse_poster.html#admiral-functions-used",
    "href": "phuse_poster.html#admiral-functions-used",
    "title": "Population Pharmacokinetic Analysis Data (ADPPK) Programming in {admiral} and the Pharmaverse",
    "section": "{admiral} Functions Used",
    "text": "{admiral} Functions Used\n\nderive_vars_dtm()\nderive_vars_dtm_to_dt()\nderive_vars_dtm_to_tm()\nderive_vars_dy()\nderive_vars_duration()\ncreate_single_dose_dataset()"
  },
  {
    "objectID": "phuse_poster.html#admiral-functions-used-continued",
    "href": "phuse_poster.html#admiral-functions-used-continued",
    "title": "Population Pharmacokinetic Analysis Data (ADPPK) Programming in {admiral} and the Pharmaverse",
    "section": "{admiral} Functions Used (continued)",
    "text": "{admiral} Functions Used (continued)\n\nderive_vars_merged()\nderive_vars_joined()\nderive_vars_transposed()\ncompute_bmi()\ncompute_bsa()\ncompute_egfr()"
  },
  {
    "objectID": "phuse_poster.html#other-pharmaverse-packages-in-adppk-workflow",
    "href": "phuse_poster.html#other-pharmaverse-packages-in-adppk-workflow",
    "title": "Population Pharmacokinetic Analysis Data (ADPPK) Programming in {admiral} and the Pharmaverse",
    "section": "Other Pharmaverse Packages in ADPPK Workflow",
    "text": "Other Pharmaverse Packages in ADPPK Workflow\n\n{pharmaversesdtm} CDISC pilot SDTM data\n{metacore} Store metadata\n{metatools} Work with metadata and perform checks\n{xportr} Perform checks and export transport files (XPT)"
  },
  {
    "objectID": "phuse_poster.html#end-to-end-example-site",
    "href": "phuse_poster.html#end-to-end-example-site",
    "title": "Population Pharmacokinetic Analysis Data (ADPPK) Programming in {admiral} and the Pharmaverse",
    "section": "End to End Example Site",
    "text": "End to End Example Site\n\nhttps://pharmaverse.github.io/e2e_pk/\nWill focus on ADPPK example"
  },
  {
    "objectID": "phuse_poster.html#coding-highlights",
    "href": "phuse_poster.html#coding-highlights",
    "title": "Population Pharmacokinetic Analysis Data (ADPPK) Programming in {admiral} and the Pharmaverse",
    "section": "Coding Highlights",
    "text": "Coding Highlights\n\n\nLoad Specs with {metacore}\nDerive PC Dates\nExpand Dosing Records\nFind First Dose\nFind Previous Dose\nFind Previous Nominal Dose\nDerive Covariates Using {metacore}\n{metacore} Checks\n{xportr} Steps"
  },
  {
    "objectID": "phuse_poster.html#load-specs-with-metacore",
    "href": "phuse_poster.html#load-specs-with-metacore",
    "title": "Population Pharmacokinetic Analysis Data (ADPPK) Programming in {admiral} and the Pharmaverse",
    "section": "Load Specs with {metacore}",
    "text": "Load Specs with {metacore}\n\n# ---- Load Specs for Metacore ----\nmetacore &lt;- spec_to_metacore(\"pk_spec.xlsx\") %&gt;%\n  select_dataset(\"ADPPK\")"
  },
  {
    "objectID": "phuse_poster.html#derive-pc-dates",
    "href": "phuse_poster.html#derive-pc-dates",
    "title": "Population Pharmacokinetic Analysis Data (ADPPK) Programming in {admiral} and the Pharmaverse",
    "section": "Derive PC Dates",
    "text": "Derive PC Dates\n\npc_dates &lt;- pc %&gt;%\n  # Join ADSL with PC (need TRTSDT for ADY derivation)\n  derive_vars_merged(\n    dataset_add = adsl,\n    new_vars = adsl_vars,\n    by_vars = exprs(STUDYID, USUBJID)\n  ) %&gt;%\n  # Derive analysis date/time\n  # Impute missing time to 00:00:00\n  derive_vars_dtm(\n    new_vars_prefix = \"A\",\n    dtc = PCDTC,\n    time_imputation = \"00:00:00\"\n  ) %&gt;%\n  # Derive dates and times from date/times\n  derive_vars_dtm_to_dt(exprs(ADTM)) %&gt;%\n  derive_vars_dtm_to_tm(exprs(ADTM)) %&gt;%\n  # Derive event ID and nominal relative time from first dose (NFRLT)\n  mutate(\n    EVID = 0,\n    DRUG = PCTEST,\n    NFRLT = if_else(PCTPTNUM &lt; 0, 0, PCTPTNUM), .after = USUBJID\n  )"
  },
  {
    "objectID": "phuse_poster.html#expand-dosing-records",
    "href": "phuse_poster.html#expand-dosing-records",
    "title": "Population Pharmacokinetic Analysis Data (ADPPK) Programming in {admiral} and the Pharmaverse",
    "section": "Expand Dosing Records",
    "text": "Expand Dosing Records\n\nex_exp &lt;- ex_dates %&gt;%\n  create_single_dose_dataset(\n    dose_freq = EXDOSFRQ,\n    start_date = ASTDT,\n    start_datetime = ASTDTM,\n    end_date = AENDT,\n    end_datetime = AENDTM,\n    nominal_time = NFRLT,\n    lookup_table = dose_freq_lookup,\n    lookup_column = CDISC_VALUE,\n    keep_source_vars = exprs(\n      STUDYID, USUBJID, EVID, EXDOSFRQ, EXDOSFRM,\n      NFRLT, EXDOSE, EXDOSU, EXTRT, ASTDT, ASTDTM, AENDT, AENDTM,\n      VISIT, VISITNUM, VISITDY,\n      TRT01A, TRT01P, DOMAIN, EXSEQ, !!!adsl_vars\n    )\n  ) %&gt;%\n  # Derive AVISIT based on nominal relative time\n  # Derive AVISITN to nominal time in whole days using integer division\n  # Define AVISIT based on nominal day\n  mutate(\n    AVISITN = NFRLT %/% 24 + 1,\n    AVISIT = paste(\"Day\", AVISITN),\n    ADTM = ASTDTM,\n    DRUG = EXTRT\n  ) %&gt;%\n  # Derive dates and times from datetimes\n  derive_vars_dtm_to_dt(exprs(ADTM)) %&gt;%\n  derive_vars_dtm_to_tm(exprs(ADTM)) %&gt;%\n  derive_vars_dtm_to_tm(exprs(ASTDTM)) %&gt;%\n  derive_vars_dtm_to_tm(exprs(AENDTM))"
  },
  {
    "objectID": "phuse_poster.html#find-first-dose",
    "href": "phuse_poster.html#find-first-dose",
    "title": "Population Pharmacokinetic Analysis Data (ADPPK) Programming in {admiral} and the Pharmaverse",
    "section": "Find First Dose",
    "text": "Find First Dose\n\nadppk_first_dose &lt;- pc_dates %&gt;%\n  derive_vars_merged(\n    dataset_add = ex_exp,\n    filter_add = (!is.na(ADTM)),\n    new_vars = exprs(FANLDTM = ADTM, EXDOSE_first = EXDOSE),\n    order = exprs(ADTM, EXSEQ),\n    mode = \"first\",\n    by_vars = exprs(STUDYID, USUBJID, DRUG)\n  ) %&gt;%\n  filter(!is.na(FANLDTM)) %&gt;%\n  # Derive AVISIT based on nominal relative time\n  # Derive AVISITN to nominal time in whole days using integer division\n  # Define AVISIT based on nominal day\n  mutate(\n    AVISITN = NFRLT %/% 24 + 1,\n    AVISIT = paste(\"Day\", AVISITN),\n  )"
  },
  {
    "objectID": "phuse_poster.html#find-previous-dose",
    "href": "phuse_poster.html#find-previous-dose",
    "title": "Population Pharmacokinetic Analysis Data (ADPPK) Programming in {admiral} and the Pharmaverse",
    "section": "Find Previous Dose",
    "text": "Find Previous Dose\n\nadppk_prev &lt;- adppk_first_dose %&gt;%\n  derive_vars_joined(\n    dataset_add = ex_exp,\n    by_vars = exprs(USUBJID),\n    order = exprs(ADTM),\n    new_vars = exprs(\n      ADTM_prev = ADTM, EXDOSE_prev = EXDOSE, AVISIT_prev = AVISIT,\n      AENDTM_prev = AENDTM\n    ),\n    join_vars = exprs(ADTM),\n    join_type = \"all\",\n    filter_add = NULL,\n    filter_join = ADTM &gt; ADTM.join,\n    mode = \"last\",\n    check_type = \"none\"\n  )"
  },
  {
    "objectID": "phuse_poster.html#find-previous-nominal-dose",
    "href": "phuse_poster.html#find-previous-nominal-dose",
    "title": "Population Pharmacokinetic Analysis Data (ADPPK) Programming in {admiral} and the Pharmaverse",
    "section": "Find Previous Nominal Dose",
    "text": "Find Previous Nominal Dose\n\nadppk_nom_prev &lt;- adppk_prev %&gt;%\n  derive_vars_joined(\n    dataset_add = ex_exp,\n    by_vars = exprs(USUBJID),\n    order = exprs(NFRLT),\n    new_vars = exprs(NFRLT_prev = NFRLT),\n    join_vars = exprs(NFRLT),\n    join_type = \"all\",\n    filter_add = NULL,\n    filter_join = NFRLT &gt; NFRLT.join,\n    mode = \"last\",\n    check_type = \"none\"\n  )"
  },
  {
    "objectID": "phuse_poster.html#derive-covariates-using-metacore",
    "href": "phuse_poster.html#derive-covariates-using-metacore",
    "title": "Population Pharmacokinetic Analysis Data (ADPPK) Programming in {admiral} and the Pharmaverse",
    "section": "Derive Covariates Using Metacore",
    "text": "Derive Covariates Using Metacore\nUse metatools::create_var_from_codelist()\n\n#---- Derive Covariates ----\ncovar &lt;- adsl %&gt;%\n  create_var_from_codelist(metacore, input_var = STUDYID, out_var = STUDYIDN) %&gt;%\n  create_var_from_codelist(metacore, input_var = SEX, out_var = SEXN) %&gt;%\n  create_var_from_codelist(metacore, input_var = RACE, out_var = RACEN) %&gt;%\n  create_var_from_codelist(metacore, input_var = ETHNIC, out_var = AETHNIC) %&gt;%\n  create_var_from_codelist(metacore, input_var = AETHNIC, out_var = AETHNICN) %&gt;%\n  create_var_from_codelist(metacore, input_var = ARMCD, out_var = COHORT) %&gt;%\n  create_var_from_codelist(metacore, input_var = ARMCD, out_var = COHORTC) %&gt;%\n  create_var_from_codelist(metacore, input_var = COUNTRY, out_var = COUNTRYN) %&gt;%\n  create_var_from_codelist(metacore, input_var = COUNTRY, out_var = COUNTRYL) %&gt;%\n  mutate(\n    STUDYIDN = as.numeric(word(USUBJID, 1, sep = fixed(\"-\"))),\n    SITEIDN = as.numeric(word(USUBJID, 2, sep = fixed(\"-\"))),\n    USUBJIDN = as.numeric(word(USUBJID, 3, sep = fixed(\"-\"))),\n    SUBJIDN = as.numeric(SUBJID),\n    ROUTE = unique(ex$EXROUTE),\n    FORM = unique(ex$EXDOSFRM),\n    REGION1 = COUNTRY,\n    REGION1N = COUNTRYN,\n    SUBJTYPC = \"Volunteer\",\n  ) %&gt;%\n  create_var_from_codelist(metacore, input_var = FORM, out_var = FORMN) %&gt;%\n  create_var_from_codelist(metacore, input_var = ROUTE, out_var = ROUTEN) %&gt;%\n  create_var_from_codelist(metacore, input_var = SUBJTYPC, out_var = SUBJTYP)"
  },
  {
    "objectID": "phuse_poster.html#calculate-additional-covariates-from-vital-signs-and-labs",
    "href": "phuse_poster.html#calculate-additional-covariates-from-vital-signs-and-labs",
    "title": "Population Pharmacokinetic Analysis Data (ADPPK) Programming in {admiral} and the Pharmaverse",
    "section": "Calculate Additional Covariates from Vital Signs and Labs",
    "text": "Calculate Additional Covariates from Vital Signs and Labs\n\ncovar_vslb &lt;- covar %&gt;%\n  derive_vars_merged(\n    dataset_add = vs,\n    filter_add = VSTESTCD == \"HEIGHT\",\n    by_vars = exprs(STUDYID, USUBJID),\n    new_vars = exprs(HTBL = VSSTRESN)\n  ) %&gt;%\n  derive_vars_merged(\n    dataset_add = vs,\n    filter_add = VSTESTCD == \"WEIGHT\" & VSBLFL == \"Y\",\n    by_vars = exprs(STUDYID, USUBJID),\n    new_vars = exprs(WTBL = VSSTRESN)\n  ) %&gt;%\n  derive_vars_transposed(\n    dataset_merge = labsbl,\n    by_vars = exprs(STUDYID, USUBJID),\n    key_var = LBTESTCDB,\n    value_var = LBSTRESN\n  ) %&gt;%\n  mutate(\n    BMIBL = compute_bmi(height = HTBL, weight = WTBL),\n    BSABL = compute_bsa(\n      height = HTBL,\n      weight = HTBL,\n      method = \"Mosteller\"\n    ),\n    CRCLBL = compute_egfr(\n      creat = CREATBL, creatu = \"SI\", age = AGE, weight = WTBL, sex = SEX,\n      method = \"CRCL\"\n    ),\n    EGFRBL = compute_egfr(\n      creat = CREATBL, creatu = \"SI\", age = AGE, weight = WTBL, sex = SEX,\n      method = \"CKD-EPI\"\n    )\n  ) %&gt;%\n  rename(TBILBL = BILIBL)"
  },
  {
    "objectID": "phuse_poster.html#metacore-checks",
    "href": "phuse_poster.html#metacore-checks",
    "title": "Population Pharmacokinetic Analysis Data (ADPPK) Programming in {admiral} and the Pharmaverse",
    "section": "{metacore} Checks",
    "text": "{metacore} Checks\n\nadppk &lt;- adppk_prefinal %&gt;%\n  drop_unspec_vars(metacore) %&gt;% # Drop unspecified variables from specs\n  check_variables(metacore) %&gt;% # Check all variables specified are present and no more\n  check_ct_data(metacore) %&gt;% # Checks all variables with CT only contain values within the CT\n  order_cols(metacore) %&gt;% # Orders the columns according to the spec\n  sort_by_key(metacore) # Sorts the rows by the sort keys"
  },
  {
    "objectID": "phuse_poster.html#xportr-steps",
    "href": "phuse_poster.html#xportr-steps",
    "title": "Population Pharmacokinetic Analysis Data (ADPPK) Programming in {admiral} and the Pharmaverse",
    "section": "{xportr} Steps",
    "text": "{xportr} Steps\n\nadppk_xpt &lt;- adppk %&gt;%\n  xportr_type(metacore) %&gt;% # Coerce variable type to match spec\n  xportr_length(metacore) %&gt;% # Assigns SAS length from a variable level metadata\n  xportr_label(metacore) %&gt;% # Assigns variable label from metacore specifications\n  xportr_format(metacore) %&gt;% # Assigns variable format from metacore specifications\n  xportr_df_label(metacore) %&gt;% # Assigns dataset label from metacore specifications\n  xportr_write(file.path(dir, \"adppk.xpt\")) # Write xpt v5 transport file"
  },
  {
    "objectID": "phuse_poster.html#adppk_xpt",
    "href": "phuse_poster.html#adppk_xpt",
    "title": "Population Pharmacokinetic Analysis Data (ADPPK) Programming in {admiral} and the Pharmaverse",
    "section": "ADPPK_XPT",
    "text": "ADPPK_XPT\n\n\n       USUBJID EVID NFRLT NPRLT       AFRLT       APRLT         DV\n1  01-701-1028    0  0.00  0.00 -0.50000000 -0.50000000 0.00000000\n2  01-701-1028    1  0.00  0.00  0.00000000  0.00000000         NA\n3  01-701-1028    0  0.08  0.08  0.08333333  0.08333333 0.10156622\n4  01-701-1028    0  0.50  0.50  0.50000000  0.50000000 0.54690177\n5  01-701-1028    0  1.00  1.00  1.00000000  1.00000000 0.92546539\n6  01-701-1028    0  1.50  1.50  1.50000000  1.50000000 1.18750588\n7  01-701-1028    0  2.00  2.00  2.00000000  2.00000000 1.36888945\n8  01-701-1028    0  4.00  4.00  4.00000000  4.00000000 1.68314758\n9  01-701-1028    0  6.00  6.00  6.00000000  6.00000000 1.75529232\n10 01-701-1028    0  8.00  8.00  8.00000000  8.00000000 1.77185470\n11 01-701-1028    0 12.00 12.00 12.00000000 12.00000000 0.49503585\n12 01-701-1028    0 16.00 16.00 16.00000000 16.00000000 0.13792316\n13 01-701-1028    0 24.00 24.00 24.00000000 24.00000000 0.01070627\n14 01-701-1028    1 24.00  0.00 24.00000000  0.00000000         NA\n15 01-701-1028    0 36.00 12.00 36.00000000 12.00000000         NA\n16 01-701-1028    0 48.00 24.00 48.00000000 24.00000000         NA\n17 01-701-1028    1 48.00  0.00 48.00000000  0.00000000         NA\n18 01-701-1033    0  0.00  0.00 -0.50000000 -0.50000000 0.00000000\n19 01-701-1033    1  0.00  0.00  0.00000000  0.00000000         NA\n20 01-701-1033    0  0.08  0.08  0.08333333  0.08333333 0.10052550"
  },
  {
    "objectID": "phuse_poster.html#summary",
    "href": "phuse_poster.html#summary",
    "title": "Population Pharmacokinetic Analysis Data (ADPPK) Programming in {admiral} and the Pharmaverse",
    "section": "Summary",
    "text": "Summary\n\nCDISC ADaM Implementation guides for ADNCA and ADPPK available\n{admiral} template programs exist for these\nPharmaverse tools can streamline the workflow\nExamples Website https://pharmaverse.github.io/e2e_pk/"
  },
  {
    "objectID": "phuse_poster.html#thank-you",
    "href": "phuse_poster.html#thank-you",
    "title": "Population Pharmacokinetic Analysis Data (ADPPK) Programming in {admiral} and the Pharmaverse",
    "section": "Thank You!",
    "text": "Thank You!\n\n{admiral} Core Team\nSlack Pharmaverse PK Working Group\nLuke Reinbolt\nBen Straub"
  },
  {
    "objectID": "PK_programming_pharmaverse.html#agenda",
    "href": "PK_programming_pharmaverse.html#agenda",
    "title": "Pharmacokinetic (PK) data programming in {admiral} and the Pharmaverse",
    "section": "Agenda",
    "text": "Agenda\n\nWhat is PK data\nTypes of PK analysis data\nBrief overview of {admiral} and the Pharmaverse\nProgramming Workflow\nSome Additional Pharmaverse tools\nPharmaverse Website Example\n\n\nHere’s quick overview for today"
  },
  {
    "objectID": "PK_programming_pharmaverse.html#pharmacokinetics-overview",
    "href": "PK_programming_pharmaverse.html#pharmacokinetics-overview",
    "title": "Pharmacokinetic (PK) data programming in {admiral} and the Pharmaverse",
    "section": "Pharmacokinetics Overview",
    "text": "Pharmacokinetics Overview\n\n\nPharmacokinetics is the interaction of a drug with the body\nSamples collected at regular time intervals after dosing\nMetrics calculated from concentrations over time"
  },
  {
    "objectID": "PK_programming_pharmaverse.html#two-main-types-of-modelling",
    "href": "PK_programming_pharmaverse.html#two-main-types-of-modelling",
    "title": "Pharmacokinetic (PK) data programming in {admiral} and the Pharmaverse",
    "section": "Two Main Types of Modelling",
    "text": "Two Main Types of Modelling\n\nNon-Compartmental Analysis (NCA)\nPopulation PK (PopPK)"
  },
  {
    "objectID": "PK_programming_pharmaverse.html#non-compartmental-analysis-nca-adncaadpc",
    "href": "PK_programming_pharmaverse.html#non-compartmental-analysis-nca-adncaadpc",
    "title": "Pharmacokinetic (PK) data programming in {admiral} and the Pharmaverse",
    "section": "Non-Compartmental Analysis (NCA) – ADNCA/ADPC",
    "text": "Non-Compartmental Analysis (NCA) – ADNCA/ADPC\n\nIndividual Based\nIntensive Sampling\nDerive Parameters e.g. AUC, TMAX, CMAX"
  },
  {
    "objectID": "PK_programming_pharmaverse.html#population-pk-poppk-adppk",
    "href": "PK_programming_pharmaverse.html#population-pk-poppk-adppk",
    "title": "Pharmacokinetic (PK) data programming in {admiral} and the Pharmaverse",
    "section": "Population PK (PopPK) – ADPPK",
    "text": "Population PK (PopPK) – ADPPK\n\nPopulation Based\nLess Intensive Sampling\nCan Detect Variations based on Covariates"
  },
  {
    "objectID": "PK_programming_pharmaverse.html#cdisc-standards-for-non-compartmental-analysis",
    "href": "PK_programming_pharmaverse.html#cdisc-standards-for-non-compartmental-analysis",
    "title": "Pharmacokinetic (PK) data programming in {admiral} and the Pharmaverse",
    "section": "CDISC Standards for Non-Compartmental Analysis",
    "text": "CDISC Standards for Non-Compartmental Analysis\n\nhttps://www.cdisc.org/standards/foundational/adam/adamig-non-compartmental-analysis-input-data-v1-0\n\nThis CDISC guidance for non-compartmental analysis was published in November of 2021\nIn using admiral for NCA data programming I have followed this guidance closely\nI will be using terms ADNCA and ADPC interchangeably"
  },
  {
    "objectID": "PK_programming_pharmaverse.html#cdisc-standards-for-population-pk-analysis",
    "href": "PK_programming_pharmaverse.html#cdisc-standards-for-population-pk-analysis",
    "title": "Pharmacokinetic (PK) data programming in {admiral} and the Pharmaverse",
    "section": "CDISC Standards for Population PK Analysis",
    "text": "CDISC Standards for Population PK Analysis\n\nPublished October 6, 2023!\nhttps://www.cdisc.org/standards/foundational/adam/basic-data-structure-adam-poppk-implementation-guide-v1-0"
  },
  {
    "objectID": "PK_programming_pharmaverse.html#cdisc-adam-pk-standards",
    "href": "PK_programming_pharmaverse.html#cdisc-adam-pk-standards",
    "title": "Pharmacokinetic (PK) data programming in {admiral} and the Pharmaverse",
    "section": "CDISC ADaM PK Standards",
    "text": "CDISC ADaM PK Standards\n\nADNCA (NCA) – released November 2021\nADPPK (PopPK) – released October 2023\nADPP (PK Parameters) – coming in 2024"
  },
  {
    "objectID": "PK_programming_pharmaverse.html#characteristics-of-pk-analysis-data",
    "href": "PK_programming_pharmaverse.html#characteristics-of-pk-analysis-data",
    "title": "Pharmacokinetic (PK) data programming in {admiral} and the Pharmaverse",
    "section": "Characteristics of PK Analysis Data",
    "text": "Characteristics of PK Analysis Data\n\nIncludes both exposure (EX) and concentration data (PC)\nIncludes nominal and actual relative time variables\nDuplicated Records for Analysis (ADNCA)\nNumeric Covariates for Modelling (ADPPK)\nMay need to expand dosing records"
  },
  {
    "objectID": "PK_programming_pharmaverse.html#important-components-of-adnca-datasets",
    "href": "PK_programming_pharmaverse.html#important-components-of-adnca-datasets",
    "title": "Pharmacokinetic (PK) data programming in {admiral} and the Pharmaverse",
    "section": "Important Components of ADNCA datasets",
    "text": "Important Components of ADNCA datasets\n\nInclusion of Both PK Concentration records PC and Dosing Records EX\nTiming Variables for Nominal and Actual Time\nDuplicated Records for Analysis\nExclusion Flags\n\nNote: I will be using terms ADNCA and ADPC interchangeably"
  },
  {
    "objectID": "PK_programming_pharmaverse.html#time-variables-adnca",
    "href": "PK_programming_pharmaverse.html#time-variables-adnca",
    "title": "Pharmacokinetic (PK) data programming in {admiral} and the Pharmaverse",
    "section": "Time Variables (ADNCA)",
    "text": "Time Variables (ADNCA)\n\n\n\nVariable\nVariable Label\n\n\n\n\nNFRLT\nNom. Rel. Time from Analyte First Dose\n\n\nAFRLT\nAct. Rel. Time from Analyte First Dose\n\n\nNRRLT\nNominal Rel. Time from Ref. Dose\n\n\nARRLT\nActual Rel. Time from Ref. Dose\n\n\nMRRLT\nModified Rel. Time from Ref. Dose\n\n\n\nNote: a relative time variable may refer to previous dose or next dose\n\nHere is a list of important nominal and actual relative time variables\nTiming Variables may refer to previous dose or next dose\nActual times may be used to calculate parameters Nominal times may be used to group output in tables"
  },
  {
    "objectID": "PK_programming_pharmaverse.html#duplicated-records-for-analysis",
    "href": "PK_programming_pharmaverse.html#duplicated-records-for-analysis",
    "title": "Pharmacokinetic (PK) data programming in {admiral} and the Pharmaverse",
    "section": "Duplicated Records for Analysis",
    "text": "Duplicated Records for Analysis\n\nUse One Record in More than One Way\nRecord may be both “24 Hour Post-Dose” and “Pre-Dose”\nRelative Times for “Pre-Dose” will be Negative\nCreate DTYPE = “COPY” Records\nOriginal PCSEQ is Retained\n\n\nHere is an overview of duplicated records for analysis"
  },
  {
    "objectID": "PK_programming_pharmaverse.html#time-variables-adppk",
    "href": "PK_programming_pharmaverse.html#time-variables-adppk",
    "title": "Pharmacokinetic (PK) data programming in {admiral} and the Pharmaverse",
    "section": "Time Variables (ADPPK)",
    "text": "Time Variables (ADPPK)\n\n\n\nVariable\nVariable Label\n\n\n\n\nNFRLT\nNominal Rel Time from First Dose\n\n\nAFRLT\nActual Rel Time from First Dose\n\n\nNPRLT\nNominal Rel Time from Previous Dose\n\n\nAPRLT\nActual Rel Time from Previous Dose"
  },
  {
    "objectID": "PK_programming_pharmaverse.html#time-variables-example",
    "href": "PK_programming_pharmaverse.html#time-variables-example",
    "title": "Pharmacokinetic (PK) data programming in {admiral} and the Pharmaverse",
    "section": "Time Variables Example",
    "text": "Time Variables Example\n\n\n\nUSUBJID\nEVID\nNFRLT\nAFRLT\nNPRLT\nARRLT\n\n\n\n\n001\n0\n0\n-0.05\n0\n-0.05\n\n\n001\n1\n0\n0\n0\n0\n\n\n001\n0\n0.5\n0.465\n0.5\n0.465\n\n\n001\n0\n3\n2.89\n3\n2.89\n\n\n001\n1\n24\n24.05\n0\n0\n\n\n001\n0\n25\n25.15\n1\n1.15"
  },
  {
    "objectID": "PK_programming_pharmaverse.html#adppk-expected-variables",
    "href": "PK_programming_pharmaverse.html#adppk-expected-variables",
    "title": "Pharmacokinetic (PK) data programming in {admiral} and the Pharmaverse",
    "section": "ADPPK Expected Variables",
    "text": "ADPPK Expected Variables\n\nEVID Event ID\nDV Dependent Variable\nMDV Missing Dependent Variable\nBLQ Below Limit of Quantitation"
  },
  {
    "objectID": "PK_programming_pharmaverse.html#adppk-covariates",
    "href": "PK_programming_pharmaverse.html#adppk-covariates",
    "title": "Pharmacokinetic (PK) data programming in {admiral} and the Pharmaverse",
    "section": "ADPPK Covariates",
    "text": "ADPPK Covariates\n\n&lt;COV&gt;BL for baseline covariate, (e.g., WTBL, BMIBL)\n&lt;COV&gt;N for numerical version of categorical covariate (e.g., SEXN, RACEN)\n&lt;COV&gt;I for any covariates with imputed values (e.g., WTI, BMII)\n&lt;COV&gt;GRy for grouping covariates (e.g. AGEGR1)"
  },
  {
    "objectID": "PK_programming_pharmaverse.html#admiral",
    "href": "PK_programming_pharmaverse.html#admiral",
    "title": "Pharmacokinetic (PK) data programming in {admiral} and the Pharmaverse",
    "section": "{admiral}",
    "text": "{admiral}\n\n\nADaM in R Asset Library\n{admiral} is Open Source and Collaborative\n{admiral} is Modular\n{admiral} is Part of Pharmaverse\n\nhttps://github.com/pharmaverse/admiral"
  },
  {
    "objectID": "PK_programming_pharmaverse.html#admiral-functions-used",
    "href": "PK_programming_pharmaverse.html#admiral-functions-used",
    "title": "Pharmacokinetic (PK) data programming in {admiral} and the Pharmaverse",
    "section": "{admiral} Functions Used",
    "text": "{admiral} Functions Used\n\nderive_vars_dtm()\nderive_vars_dtm_to_dt()\nderive_vars_dtm_to_tm()\nderive_vars_dy()\nderive_vars_duration()\ncreate_single_dose_dataset()"
  },
  {
    "objectID": "PK_programming_pharmaverse.html#admiral-functions-used-continued",
    "href": "PK_programming_pharmaverse.html#admiral-functions-used-continued",
    "title": "Pharmacokinetic (PK) data programming in {admiral} and the Pharmaverse",
    "section": "{admiral} Functions Used (continued)",
    "text": "{admiral} Functions Used (continued)\n\nderive_vars_merged()\nderive_vars_joined()\nderive_vars_transposed()\ncompute_bmi()\ncompute_bsa()\ncompute_egfr()"
  },
  {
    "objectID": "PK_programming_pharmaverse.html#welcome-to-the-pharmaverse",
    "href": "PK_programming_pharmaverse.html#welcome-to-the-pharmaverse",
    "title": "Pharmacokinetic (PK) data programming in {admiral} and the Pharmaverse",
    "section": "Welcome to the Pharmaverse",
    "text": "Welcome to the Pharmaverse\n\nhttps://pharmaverse.org/\n\nPharmaverse a connected network of companies and individuals working to promote collaborative development of open source R packages for clinical reporting usage across our industry"
  },
  {
    "objectID": "PK_programming_pharmaverse.html#other-pharmaverse-packages-in-adppk-workflow",
    "href": "PK_programming_pharmaverse.html#other-pharmaverse-packages-in-adppk-workflow",
    "title": "Pharmacokinetic (PK) data programming in {admiral} and the Pharmaverse",
    "section": "Other Pharmaverse Packages in ADPPK Workflow",
    "text": "Other Pharmaverse Packages in ADPPK Workflow\n\n{pharmaversesdtm} CDISC pilot SDTM data\n{metacore} Store metadata\n{metatools} Work with metadata and perform checks\n{xportr} Perform checks and export transport files (XPT)"
  },
  {
    "objectID": "PK_programming_pharmaverse.html#end-to-end-example-site",
    "href": "PK_programming_pharmaverse.html#end-to-end-example-site",
    "title": "Pharmacokinetic (PK) data programming in {admiral} and the Pharmaverse",
    "section": "End to End Example Site",
    "text": "End to End Example Site\n\nhttps://pharmaverse.github.io/e2e_pk/\nWill focus on ADPPK example"
  },
  {
    "objectID": "PK_programming_pharmaverse.html#coding-highlights",
    "href": "PK_programming_pharmaverse.html#coding-highlights",
    "title": "Pharmacokinetic (PK) data programming in {admiral} and the Pharmaverse",
    "section": "Coding Highlights",
    "text": "Coding Highlights\n\n\nLoad Specs with {metacore}\nDerive PC Dates\nExpand Dosing Records\nFind First Dose\nFind Previous Dose\nFind Previous Nominal Dose\nDerive Covariates Using {metacore}\n{metacore} Checks\n{xportr} Steps"
  },
  {
    "objectID": "PK_programming_pharmaverse.html#load-specs-with-metacore",
    "href": "PK_programming_pharmaverse.html#load-specs-with-metacore",
    "title": "Pharmacokinetic (PK) data programming in {admiral} and the Pharmaverse",
    "section": "Load Specs with {metacore}",
    "text": "Load Specs with {metacore}\n\n# ---- Load Specs for Metacore ----\nmetacore &lt;- spec_to_metacore(\"pk_spec.xlsx\") %&gt;%\n  select_dataset(\"ADPPK\")"
  },
  {
    "objectID": "PK_programming_pharmaverse.html#derive-pc-dates",
    "href": "PK_programming_pharmaverse.html#derive-pc-dates",
    "title": "Pharmacokinetic (PK) data programming in {admiral} and the Pharmaverse",
    "section": "Derive PC Dates",
    "text": "Derive PC Dates\n\npc_dates &lt;- pc %&gt;%\n  # Join ADSL with PC (need TRTSDT for ADY derivation)\n  derive_vars_merged(\n    dataset_add = adsl,\n    new_vars = adsl_vars,\n    by_vars = exprs(STUDYID, USUBJID)\n  ) %&gt;%\n  # Derive analysis date/time\n  # Impute missing time to 00:00:00\n  derive_vars_dtm(\n    new_vars_prefix = \"A\",\n    dtc = PCDTC,\n    time_imputation = \"00:00:00\"\n  ) %&gt;%\n  # Derive dates and times from date/times\n  derive_vars_dtm_to_dt(exprs(ADTM)) %&gt;%\n  derive_vars_dtm_to_tm(exprs(ADTM)) %&gt;%\n  # Derive event ID and nominal relative time from first dose (NFRLT)\n  mutate(\n    EVID = 0,\n    DRUG = PCTEST,\n    NFRLT = if_else(PCTPTNUM &lt; 0, 0, PCTPTNUM), .after = USUBJID\n  )"
  },
  {
    "objectID": "PK_programming_pharmaverse.html#expand-dosing-records",
    "href": "PK_programming_pharmaverse.html#expand-dosing-records",
    "title": "Pharmacokinetic (PK) data programming in {admiral} and the Pharmaverse",
    "section": "Expand Dosing Records",
    "text": "Expand Dosing Records\n\nex_exp &lt;- ex_dates %&gt;%\n  create_single_dose_dataset(\n    dose_freq = EXDOSFRQ,\n    start_date = ASTDT,\n    start_datetime = ASTDTM,\n    end_date = AENDT,\n    end_datetime = AENDTM,\n    nominal_time = NFRLT,\n    lookup_table = dose_freq_lookup,\n    lookup_column = CDISC_VALUE,\n    keep_source_vars = exprs(\n      STUDYID, USUBJID, EVID, EXDOSFRQ, EXDOSFRM,\n      NFRLT, EXDOSE, EXDOSU, EXTRT, ASTDT, ASTDTM, AENDT, AENDTM,\n      VISIT, VISITNUM, VISITDY,\n      TRT01A, TRT01P, DOMAIN, EXSEQ, !!!adsl_vars\n    )\n  ) %&gt;%\n  # Derive AVISIT based on nominal relative time\n  # Derive AVISITN to nominal time in whole days using integer division\n  # Define AVISIT based on nominal day\n  mutate(\n    AVISITN = NFRLT %/% 24 + 1,\n    AVISIT = paste(\"Day\", AVISITN),\n    ADTM = ASTDTM,\n    DRUG = EXTRT\n  ) %&gt;%\n  # Derive dates and times from datetimes\n  derive_vars_dtm_to_dt(exprs(ADTM)) %&gt;%\n  derive_vars_dtm_to_tm(exprs(ADTM)) %&gt;%\n  derive_vars_dtm_to_tm(exprs(ASTDTM)) %&gt;%\n  derive_vars_dtm_to_tm(exprs(AENDTM))"
  },
  {
    "objectID": "PK_programming_pharmaverse.html#find-first-dose",
    "href": "PK_programming_pharmaverse.html#find-first-dose",
    "title": "Pharmacokinetic (PK) data programming in {admiral} and the Pharmaverse",
    "section": "Find First Dose",
    "text": "Find First Dose\n\nadppk_first_dose &lt;- pc_dates %&gt;%\n  derive_vars_merged(\n    dataset_add = ex_exp,\n    filter_add = (!is.na(ADTM)),\n    new_vars = exprs(FANLDTM = ADTM, EXDOSE_first = EXDOSE),\n    order = exprs(ADTM, EXSEQ),\n    mode = \"first\",\n    by_vars = exprs(STUDYID, USUBJID, DRUG)\n  ) %&gt;%\n  filter(!is.na(FANLDTM)) %&gt;%\n  # Derive AVISIT based on nominal relative time\n  # Derive AVISITN to nominal time in whole days using integer division\n  # Define AVISIT based on nominal day\n  mutate(\n    AVISITN = NFRLT %/% 24 + 1,\n    AVISIT = paste(\"Day\", AVISITN),\n  )"
  },
  {
    "objectID": "PK_programming_pharmaverse.html#find-previous-dose",
    "href": "PK_programming_pharmaverse.html#find-previous-dose",
    "title": "Pharmacokinetic (PK) data programming in {admiral} and the Pharmaverse",
    "section": "Find Previous Dose",
    "text": "Find Previous Dose\n\nadppk_prev &lt;- adppk_first_dose %&gt;%\n  derive_vars_joined(\n    dataset_add = ex_exp,\n    by_vars = exprs(USUBJID),\n    order = exprs(ADTM),\n    new_vars = exprs(\n      ADTM_prev = ADTM, EXDOSE_prev = EXDOSE, AVISIT_prev = AVISIT,\n      AENDTM_prev = AENDTM\n    ),\n    join_vars = exprs(ADTM),\n    join_type = \"all\",\n    filter_add = NULL,\n    filter_join = ADTM &gt; ADTM.join,\n    mode = \"last\",\n    check_type = \"none\"\n  )"
  },
  {
    "objectID": "PK_programming_pharmaverse.html#find-previous-nominal-dose",
    "href": "PK_programming_pharmaverse.html#find-previous-nominal-dose",
    "title": "Pharmacokinetic (PK) data programming in {admiral} and the Pharmaverse",
    "section": "Find Previous Nominal Dose",
    "text": "Find Previous Nominal Dose\n\nadppk_nom_prev &lt;- adppk_prev %&gt;%\n  derive_vars_joined(\n    dataset_add = ex_exp,\n    by_vars = exprs(USUBJID),\n    order = exprs(NFRLT),\n    new_vars = exprs(NFRLT_prev = NFRLT),\n    join_vars = exprs(NFRLT),\n    join_type = \"all\",\n    filter_add = NULL,\n    filter_join = NFRLT &gt; NFRLT.join,\n    mode = \"last\",\n    check_type = \"none\"\n  )"
  },
  {
    "objectID": "PK_programming_pharmaverse.html#derive-covariates-using-metacore",
    "href": "PK_programming_pharmaverse.html#derive-covariates-using-metacore",
    "title": "Pharmacokinetic (PK) data programming in {admiral} and the Pharmaverse",
    "section": "Derive Covariates Using Metacore",
    "text": "Derive Covariates Using Metacore\nUse metatools::create_var_from_codelist()\n\n#---- Derive Covariates ----\ncovar &lt;- adsl %&gt;%\n  create_var_from_codelist(metacore, input_var = STUDYID, out_var = STUDYIDN) %&gt;%\n  create_var_from_codelist(metacore, input_var = SEX, out_var = SEXN) %&gt;%\n  create_var_from_codelist(metacore, input_var = RACE, out_var = RACEN) %&gt;%\n  create_var_from_codelist(metacore, input_var = ETHNIC, out_var = AETHNIC) %&gt;%\n  create_var_from_codelist(metacore, input_var = AETHNIC, out_var = AETHNICN) %&gt;%\n  create_var_from_codelist(metacore, input_var = ARMCD, out_var = COHORT) %&gt;%\n  create_var_from_codelist(metacore, input_var = ARMCD, out_var = COHORTC) %&gt;%\n  create_var_from_codelist(metacore, input_var = COUNTRY, out_var = COUNTRYN) %&gt;%\n  create_var_from_codelist(metacore, input_var = COUNTRY, out_var = COUNTRYL) %&gt;%\n  mutate(\n    STUDYIDN = as.numeric(word(USUBJID, 1, sep = fixed(\"-\"))),\n    SITEIDN = as.numeric(word(USUBJID, 2, sep = fixed(\"-\"))),\n    USUBJIDN = as.numeric(word(USUBJID, 3, sep = fixed(\"-\"))),\n    SUBJIDN = as.numeric(SUBJID),\n    ROUTE = unique(ex$EXROUTE),\n    FORM = unique(ex$EXDOSFRM),\n    REGION1 = COUNTRY,\n    REGION1N = COUNTRYN,\n    SUBJTYPC = \"Volunteer\",\n  ) %&gt;%\n  create_var_from_codelist(metacore, input_var = FORM, out_var = FORMN) %&gt;%\n  create_var_from_codelist(metacore, input_var = ROUTE, out_var = ROUTEN) %&gt;%\n  create_var_from_codelist(metacore, input_var = SUBJTYPC, out_var = SUBJTYP)"
  },
  {
    "objectID": "PK_programming_pharmaverse.html#calculate-additional-covariates-from-vital-signs-and-labs",
    "href": "PK_programming_pharmaverse.html#calculate-additional-covariates-from-vital-signs-and-labs",
    "title": "Pharmacokinetic (PK) data programming in {admiral} and the Pharmaverse",
    "section": "Calculate Additional Covariates from Vital Signs and Labs",
    "text": "Calculate Additional Covariates from Vital Signs and Labs\n\ncovar_vslb &lt;- covar %&gt;%\n  derive_vars_merged(\n    dataset_add = vs,\n    filter_add = VSTESTCD == \"HEIGHT\",\n    by_vars = exprs(STUDYID, USUBJID),\n    new_vars = exprs(HTBL = VSSTRESN)\n  ) %&gt;%\n  derive_vars_merged(\n    dataset_add = vs,\n    filter_add = VSTESTCD == \"WEIGHT\" & VSBLFL == \"Y\",\n    by_vars = exprs(STUDYID, USUBJID),\n    new_vars = exprs(WTBL = VSSTRESN)\n  ) %&gt;%\n  derive_vars_transposed(\n    dataset_merge = labsbl,\n    by_vars = exprs(STUDYID, USUBJID),\n    key_var = LBTESTCDB,\n    value_var = LBSTRESN\n  ) %&gt;%\n  mutate(\n    BMIBL = compute_bmi(height = HTBL, weight = WTBL),\n    BSABL = compute_bsa(\n      height = HTBL,\n      weight = HTBL,\n      method = \"Mosteller\"\n    ),\n    CRCLBL = compute_egfr(\n      creat = CREATBL, creatu = \"SI\", age = AGE, weight = WTBL, sex = SEX,\n      method = \"CRCL\"\n    ),\n    EGFRBL = compute_egfr(\n      creat = CREATBL, creatu = \"SI\", age = AGE, weight = WTBL, sex = SEX,\n      method = \"CKD-EPI\"\n    )\n  ) %&gt;%\n  rename(TBILBL = BILIBL)"
  },
  {
    "objectID": "PK_programming_pharmaverse.html#metacore-checks",
    "href": "PK_programming_pharmaverse.html#metacore-checks",
    "title": "Pharmacokinetic (PK) data programming in {admiral} and the Pharmaverse",
    "section": "{metacore} Checks",
    "text": "{metacore} Checks\n\nadppk &lt;- adppk_prefinal %&gt;%\n  drop_unspec_vars(metacore) %&gt;% # Drop unspecified variables from specs\n  check_variables(metacore) %&gt;% # Check all variables specified are present and no more\n  check_ct_data(metacore) %&gt;% # Checks all variables with CT only contain values within the CT\n  order_cols(metacore) %&gt;% # Orders the columns according to the spec\n  sort_by_key(metacore) # Sorts the rows by the sort keys"
  },
  {
    "objectID": "PK_programming_pharmaverse.html#xportr-steps",
    "href": "PK_programming_pharmaverse.html#xportr-steps",
    "title": "Pharmacokinetic (PK) data programming in {admiral} and the Pharmaverse",
    "section": "{xportr} Steps",
    "text": "{xportr} Steps\n\nadppk_xpt &lt;- adppk %&gt;%\n  xportr_type(metacore) %&gt;% # Coerce variable type to match spec\n  xportr_length(metacore) %&gt;% # Assigns SAS length from a variable level metadata\n  xportr_label(metacore) %&gt;% # Assigns variable label from metacore specifications\n  xportr_format(metacore) %&gt;% # Assigns variable format from metacore specifications\n  xportr_df_label(metacore) %&gt;% # Assigns dataset label from metacore specifications\n  xportr_write(file.path(dir, \"adppk.xpt\")) # Write xpt v5 transport file"
  },
  {
    "objectID": "PK_programming_pharmaverse.html#adppk_xpt",
    "href": "PK_programming_pharmaverse.html#adppk_xpt",
    "title": "Pharmacokinetic (PK) data programming in {admiral} and the Pharmaverse",
    "section": "ADPPK_XPT",
    "text": "ADPPK_XPT\n\n\n       USUBJID EVID NFRLT NPRLT       AFRLT       APRLT         DV\n1  01-701-1028    0  0.00  0.00 -0.50000000 -0.50000000 0.00000000\n2  01-701-1028    1  0.00  0.00  0.00000000  0.00000000         NA\n3  01-701-1028    0  0.08  0.08  0.08333333  0.08333333 0.10156622\n4  01-701-1028    0  0.50  0.50  0.50000000  0.50000000 0.54690177\n5  01-701-1028    0  1.00  1.00  1.00000000  1.00000000 0.92546539\n6  01-701-1028    0  1.50  1.50  1.50000000  1.50000000 1.18750588\n7  01-701-1028    0  2.00  2.00  2.00000000  2.00000000 1.36888945\n8  01-701-1028    0  4.00  4.00  4.00000000  4.00000000 1.68314758\n9  01-701-1028    0  6.00  6.00  6.00000000  6.00000000 1.75529232\n10 01-701-1028    0  8.00  8.00  8.00000000  8.00000000 1.77185470\n11 01-701-1028    0 12.00 12.00 12.00000000 12.00000000 0.49503585\n12 01-701-1028    0 16.00 16.00 16.00000000 16.00000000 0.13792316\n13 01-701-1028    0 24.00 24.00 24.00000000 24.00000000 0.01070627\n14 01-701-1028    1 24.00  0.00 24.00000000  0.00000000         NA\n15 01-701-1028    0 36.00 12.00 36.00000000 12.00000000         NA\n16 01-701-1028    0 48.00 24.00 48.00000000 24.00000000         NA\n17 01-701-1028    1 48.00  0.00 48.00000000  0.00000000         NA\n18 01-701-1033    0  0.00  0.00 -0.50000000 -0.50000000 0.00000000\n19 01-701-1033    1  0.00  0.00  0.00000000  0.00000000         NA\n20 01-701-1033    0  0.08  0.08  0.08333333  0.08333333 0.10052550"
  },
  {
    "objectID": "PK_programming_pharmaverse.html#summary",
    "href": "PK_programming_pharmaverse.html#summary",
    "title": "Pharmacokinetic (PK) data programming in {admiral} and the Pharmaverse",
    "section": "Summary",
    "text": "Summary\n\nCDISC ADaM Implementation guides for ADNCA and ADPPK available\n{admiral} template programs exist for these\nPharmaverse tools can streamline the workflow\nExamples Website https://pharmaverse.github.io/e2e_pk/"
  },
  {
    "objectID": "PK_programming_pharmaverse.html#thank-you",
    "href": "PK_programming_pharmaverse.html#thank-you",
    "title": "Pharmacokinetic (PK) data programming in {admiral} and the Pharmaverse",
    "section": "Thank You!",
    "text": "Thank You!\n\n{admiral} Core Team\nSlack Pharmaverse PK Working Group\nLuke Reinbolt\nBen Straub"
  },
  {
    "objectID": "PK_programming_pharmaverse.html#questions",
    "href": "PK_programming_pharmaverse.html#questions",
    "title": "Pharmacokinetic (PK) data programming in {admiral} and the Pharmaverse",
    "section": "Questions",
    "text": "Questions"
  },
  {
    "objectID": "adnca_admiral.html#agenda",
    "href": "adnca_admiral.html#agenda",
    "title": "Programming CDISC ADaM ADNCA using R and {admiral}",
    "section": "Agenda",
    "text": "Agenda\n\nBasic Concepts of Non-Compartmental Analysis NCA\nQuick overview of {admiral}\nCoding Steps for ADNCA\nNew Functionality Highlights\nConclusions\nQuestions and Answers\n\n\nHere’s quick overview for today"
  },
  {
    "objectID": "adnca_admiral.html#cdisc-standards-for-non-compartmental-analysis",
    "href": "adnca_admiral.html#cdisc-standards-for-non-compartmental-analysis",
    "title": "Programming CDISC ADaM ADNCA using R and {admiral}",
    "section": "CDISC Standards for Non-Compartmental Analysis",
    "text": "CDISC Standards for Non-Compartmental Analysis\n\n\nThis CDISC guidance for non-compartmental analysis was published in November of 2021\nIn using admiral for NCA data programming I have followed this guidance closely\nI will be using terms ADNCA and ADPC interchangeably\n\nhttps://www.cdisc.org/standards/foundational/adam/adamig-non-compartmental-analysis-input-data-v1-0"
  },
  {
    "objectID": "adnca_admiral.html#non-compartmental-analysis-nca",
    "href": "adnca_admiral.html#non-compartmental-analysis-nca",
    "title": "Programming CDISC ADaM ADNCA using R and {admiral}",
    "section": "Non-Compartmental Analysis (NCA)",
    "text": "Non-Compartmental Analysis (NCA)\n\nExample PK Curve with Parameters\nNon-compartmental analysis (NCA) is one way to model the level of exposure following administration of a drug Here you can see a sample PK curve and the types of parameters that may be estimated"
  },
  {
    "objectID": "adnca_admiral.html#important-components-of-adnca-datasets",
    "href": "adnca_admiral.html#important-components-of-adnca-datasets",
    "title": "Programming CDISC ADaM ADNCA using R and {admiral}",
    "section": "Important Components of ADNCA datasets",
    "text": "Important Components of ADNCA datasets\n\nInclusion of Both PK Concentration records PC and Dosing Records EX\nTiming Variables for Nominal and Actual Time\nDuplicated Records for Analysis\nExclusion Flags\n\nNote: I will be using terms ADNCA and ADPC interchangeably"
  },
  {
    "objectID": "adnca_admiral.html#time-variables",
    "href": "adnca_admiral.html#time-variables",
    "title": "Programming CDISC ADaM ADNCA using R and {admiral}",
    "section": "Time Variables",
    "text": "Time Variables\n\n\n\nVariable\nVariable Label\n\n\n\n\nNFRLT\nNom. Rel. Time from Analyte First Dose\n\n\nAFRLT\nAct. Rel. Time from Analyte First Dose\n\n\nNRRLT\nNominal Rel. Time from Ref. Dose\n\n\nARRLT\nActual Rel. Time from Ref. Dose\n\n\nMRRLT\nModified Rel. Time from Ref. Dose\n\n\n\nNote: a relative time variable may refer to previous dose or next dose\n\nHere is a list of important nominal and actual relative time variables\nTiming Variables may refer to previous dose or next dose\nActual times may be used to calculate parameters Nominal times may be used to group output in tables"
  },
  {
    "objectID": "adnca_admiral.html#duplicated-records-for-analysis",
    "href": "adnca_admiral.html#duplicated-records-for-analysis",
    "title": "Programming CDISC ADaM ADNCA using R and {admiral}",
    "section": "Duplicated Records for Analysis",
    "text": "Duplicated Records for Analysis\n\nUse One Record in More than One Way\nRecord may be both “24 Hour Post-Dose” and “Pre-Dose”\nOr “Cycle 2 Day 1 Pre-Dose” and “Cycle 1 Day 28 Post-Dose”\nRelative Times for “Pre-Dose” will be Negative\nCreate DTYPE = “COPY” Records\nOriginal PCSEQ is Retained\n\n\nHere is an overview of duplicated records for analysis"
  },
  {
    "objectID": "adnca_admiral.html#brief-overview-of-admiral",
    "href": "adnca_admiral.html#brief-overview-of-admiral",
    "title": "Programming CDISC ADaM ADNCA using R and {admiral}",
    "section": "Brief Overview of {admiral}",
    "text": "Brief Overview of {admiral}\n\nhttps://github.com/pharmaverse/admiral"
  },
  {
    "objectID": "adnca_admiral.html#admiral",
    "href": "adnca_admiral.html#admiral",
    "title": "Programming CDISC ADaM ADNCA using R and {admiral}",
    "section": "{admiral}",
    "text": "{admiral}\n\n\nADaM in R Asset Library\n{admiral} is Open Source and Collaborative\n{admiral} is Modular\n{admiral} is Part of Pharmaverse"
  },
  {
    "objectID": "adnca_admiral.html#admiral-is-open-source-and-collaborative",
    "href": "adnca_admiral.html#admiral-is-open-source-and-collaborative",
    "title": "Programming CDISC ADaM ADNCA using R and {admiral}",
    "section": "{admiral} is Open Source and Collaborative",
    "text": "{admiral} is Open Source and Collaborative\n\n{admiral} Ecosystem\nadmiral began as a collaboration between Roche and GSK The ecosystem has since expanded to include many contributors from multiple companies"
  },
  {
    "objectID": "adnca_admiral.html#admiral-is-modular",
    "href": "adnca_admiral.html#admiral-is-modular",
    "title": "Programming CDISC ADaM ADNCA using R and {admiral}",
    "section": "{admiral} is Modular",
    "text": "{admiral} is Modular\n\nNot One Large Function (e.g. create_adpc())\nMultiple Coordinated Functions"
  },
  {
    "objectID": "adnca_admiral.html#admiral-is-part-of-pharmaverse",
    "href": "adnca_admiral.html#admiral-is-part-of-pharmaverse",
    "title": "Programming CDISC ADaM ADNCA using R and {admiral}",
    "section": "{admiral} is Part of Pharmaverse",
    "text": "{admiral} is Part of Pharmaverse\n\nhttps://github.com/pharmaverse\n\nPharmaverse a connected network of companies and individuals working to promote collaborative development of open source R packages for clinical reporting usage across our industry, in a space where previously we would only ever have worked in silos on our own closed source and duplicative solutions"
  },
  {
    "objectID": "adnca_admiral.html#admiral-updates-for-pk",
    "href": "adnca_admiral.html#admiral-updates-for-pk",
    "title": "Programming CDISC ADaM ADNCA using R and {admiral}",
    "section": "{admiral} updates for PK",
    "text": "{admiral} updates for PK\n(March 6, 2023 release 0.10.0)\n\nNew ad_adpc.R Template\nNew PK Programming Vignette\nUpdates to create_single_dose_dataset() function"
  },
  {
    "objectID": "adnca_admiral.html#programming-workflow",
    "href": "adnca_admiral.html#programming-workflow",
    "title": "Programming CDISC ADaM ADNCA using R and {admiral}",
    "section": "Programming Workflow",
    "text": "Programming Workflow\n\n\nRead in Data\nExpand Dosing Records\nFind First Dose and Calculate First Datetime\nFind Reference Dose Dates Corresponding to PK Records\nCombine PC and EX Records and Derive Relative Time Variables\nDerive Analysis Variables"
  },
  {
    "objectID": "adnca_admiral.html#programming-workflow-continued",
    "href": "adnca_admiral.html#programming-workflow-continued",
    "title": "Programming CDISC ADaM ADNCA using R and {admiral}",
    "section": "Programming Workflow (Continued)",
    "text": "Programming Workflow (Continued)\n\n\nCreate Duplicated Records for Analysis\nCombine ADPC data with Duplicated Records\nCalculate Baseline and Change from Baseline\nAssign ASEQ\nAdd Additional Baseline Variables\nAdd ADSL variables\nAdd Labels and Attributes"
  },
  {
    "objectID": "adnca_admiral.html#admiral-libraries",
    "href": "adnca_admiral.html#admiral-libraries",
    "title": "Programming CDISC ADaM ADNCA using R and {admiral}",
    "section": "{admiral} Libraries",
    "text": "{admiral} Libraries\n\nlibrary(admiral)\nlibrary(admiraldev)\nlibrary(pharmaversesdtm)\nlibrary(dplyr)\nlibrary(lubridate)\nlibrary(stringr)\n\n\nHere are the required packages"
  },
  {
    "objectID": "adnca_admiral.html#read-in-data",
    "href": "adnca_admiral.html#read-in-data",
    "title": "Programming CDISC ADaM ADNCA using R and {admiral}",
    "section": "Read in Data",
    "text": "Read in Data\n\ndata(\"admiral_adsl\")\ndata(\"ex\")\ndata(\"pc\")\ndata(\"vs\")\n\nadsl &lt;- admiral_adsl\nex &lt;- convert_blanks_to_na(ex)\npc &lt;- convert_blanks_to_na(pc)\nvs &lt;- convert_blanks_to_na(vs)\n\n\nWe read in the test dataset from the pharmaversesdtm library Note we convert blanks to NA so they are handled consistently within R The test data for EX/PC consist of a daily patch"
  },
  {
    "objectID": "adnca_admiral.html#pc-rawdata",
    "href": "adnca_admiral.html#pc-rawdata",
    "title": "Programming CDISC ADaM ADNCA using R and {admiral}",
    "section": "PC Rawdata",
    "text": "PC Rawdata\n\n\n# A tibble: 14 × 6\n   USUBJID     PCTEST     PCDTC               VISIT    PCTPT            PCSTRESN\n   &lt;chr&gt;       &lt;chr&gt;      &lt;chr&gt;               &lt;chr&gt;    &lt;chr&gt;               &lt;dbl&gt;\n 1 01-701-1028 XANOMELINE 2013-07-18T23:30:00 BASELINE Pre-dose           0     \n 2 01-701-1028 XANOMELINE 2013-07-19T00:05:00 BASELINE 5 Min Post-dose    0.102 \n 3 01-701-1028 XANOMELINE 2013-07-19T00:30:00 BASELINE 30 Min Post-dose   0.547 \n 4 01-701-1028 XANOMELINE 2013-07-19T01:00:00 BASELINE 1h Post-dose       0.925 \n 5 01-701-1028 XANOMELINE 2013-07-19T01:30:00 BASELINE 1.5h Post-dose     1.19  \n 6 01-701-1028 XANOMELINE 2013-07-19T02:00:00 BASELINE 2h Post-dose       1.37  \n 7 01-701-1028 XANOMELINE 2013-07-19T04:00:00 BASELINE 4h Post-dose       1.68  \n 8 01-701-1028 XANOMELINE 2013-07-19T06:00:00 BASELINE 6h Post-dose       1.76  \n 9 01-701-1028 XANOMELINE 2013-07-19T08:00:00 BASELINE 8h Post-dose       1.77  \n10 01-701-1028 XANOMELINE 2013-07-19T12:00:00 BASELINE 12h Post-dose      0.495 \n11 01-701-1028 XANOMELINE 2013-07-19T16:00:00 BASELINE 16h Post-dose      0.138 \n12 01-701-1028 XANOMELINE 2013-07-20T00:00:00 BASELINE 24h Post-dose      0.0107\n13 01-701-1028 XANOMELINE 2013-07-20T12:00:00 BASELINE 36h Post-dose     NA     \n14 01-701-1028 XANOMELINE 2013-07-21T00:00:00 BASELINE 48h Post-dose     NA     \n\n\nThis CDISC test PC data has concentrations over 48 hours from a daily patch\n\nHere is our PC rawdata This shows concentrations over 48 hours from a daily patch"
  },
  {
    "objectID": "adnca_admiral.html#join-adsl-with-pc",
    "href": "adnca_admiral.html#join-adsl-with-pc",
    "title": "Programming CDISC ADaM ADNCA using R and {admiral}",
    "section": "Join ADSL with PC",
    "text": "Join ADSL with PC\n\nUse function derive_vars_merged()\nConvert Dates to Numeric\nFunctions\n\nderive_vars_dtm()\nderive_vars_dtm_to_dt()\nderive_vars_dtm_to_tm()\nderive_vars_dy()\n\nDerive NFRLT for PC data based on PCTPTNUM\n\n\nFirst we join ADSL with our PC data"
  },
  {
    "objectID": "adnca_admiral.html#pc-merge-code",
    "href": "adnca_admiral.html#pc-merge-code",
    "title": "Programming CDISC ADaM ADNCA using R and {admiral}",
    "section": "PC Merge Code",
    "text": "PC Merge Code\n\nadsl_vars &lt;- exprs(TRTSDT, TRTSDTM, TRT01P, TRT01A)\n\nadpc &lt;- pc %&gt;%\n  # Join ADSL with PC (need TRTSDT for ADY derivation)\n  derive_vars_merged(\n    dataset_add = adsl,\n    new_vars = adsl_vars,\n    by_vars = exprs(STUDYID, USUBJID)\n  ) %&gt;%\n  # Calculate ADTM, ADT, ADY\n  derive_vars_dtm(\n    new_vars_prefix = \"A\",\n    dtc = PCDTC,\n    time_imputation = \"00:00:00\"\n  ) %&gt;%\n  # Derive dates and times from date/times\n  derive_vars_dtm_to_dt(exprs(ADTM)) %&gt;%\n  derive_vars_dtm_to_tm(exprs(ADTM)) %&gt;%\n  derive_vars_dy(reference_date = TRTSDT, source_vars = exprs(ADT)) %&gt;%\n  # Derive event ID and nominal relative time from first dose (NFRLT)\n  mutate(\n    EVID = 0,\n    DRUG = PCTEST,\n    NFRLT = if_else(PCTPTNUM &lt; 0, 0, PCTPTNUM), .after = USUBJID\n  )\n\n\nHere is the code for joining ADSL with PC"
  },
  {
    "objectID": "adnca_admiral.html#pc-merge-code-output",
    "href": "adnca_admiral.html#pc-merge-code-output",
    "title": "Programming CDISC ADaM ADNCA using R and {admiral}",
    "section": "PC Merge Code Output",
    "text": "PC Merge Code Output\n\n\n# A tibble: 14 × 6\n   USUBJID     PCTEST     ADTM                VISIT    PCTPT            NFRLT\n   &lt;chr&gt;       &lt;chr&gt;      &lt;dttm&gt;              &lt;chr&gt;    &lt;chr&gt;            &lt;dbl&gt;\n 1 01-701-1028 XANOMELINE 2013-07-18 23:30:00 BASELINE Pre-dose          0   \n 2 01-701-1028 XANOMELINE 2013-07-19 00:05:00 BASELINE 5 Min Post-dose   0.08\n 3 01-701-1028 XANOMELINE 2013-07-19 00:30:00 BASELINE 30 Min Post-dose  0.5 \n 4 01-701-1028 XANOMELINE 2013-07-19 01:00:00 BASELINE 1h Post-dose      1   \n 5 01-701-1028 XANOMELINE 2013-07-19 01:30:00 BASELINE 1.5h Post-dose    1.5 \n 6 01-701-1028 XANOMELINE 2013-07-19 02:00:00 BASELINE 2h Post-dose      2   \n 7 01-701-1028 XANOMELINE 2013-07-19 04:00:00 BASELINE 4h Post-dose      4   \n 8 01-701-1028 XANOMELINE 2013-07-19 06:00:00 BASELINE 6h Post-dose      6   \n 9 01-701-1028 XANOMELINE 2013-07-19 08:00:00 BASELINE 8h Post-dose      8   \n10 01-701-1028 XANOMELINE 2013-07-19 12:00:00 BASELINE 12h Post-dose    12   \n11 01-701-1028 XANOMELINE 2013-07-19 16:00:00 BASELINE 16h Post-dose    16   \n12 01-701-1028 XANOMELINE 2013-07-20 00:00:00 BASELINE 24h Post-dose    24   \n13 01-701-1028 XANOMELINE 2013-07-20 12:00:00 BASELINE 36h Post-dose    36   \n14 01-701-1028 XANOMELINE 2013-07-21 00:00:00 BASELINE 48h Post-dose    48   \n\n\nNote numeric datetimes and Nominal Relative Time from Analyte First Dose (NFRLT)\n\nHere is the output of joining ADSL with PC Note Numeric Datetimes and Nominal Relative Time from Analyte First Dose NFRLT"
  },
  {
    "objectID": "adnca_admiral.html#ex-rawdata",
    "href": "adnca_admiral.html#ex-rawdata",
    "title": "Programming CDISC ADaM ADNCA using R and {admiral}",
    "section": "EX Rawdata",
    "text": "EX Rawdata\n\n\n# A tibble: 3 × 7\n  USUBJID     EXTRT      EXDOSFRQ EXSTDTC    EXENDTC    VISIT    VISITDY\n  &lt;chr&gt;       &lt;chr&gt;      &lt;chr&gt;    &lt;chr&gt;      &lt;chr&gt;      &lt;chr&gt;      &lt;dbl&gt;\n1 01-701-1028 XANOMELINE QD       2013-07-19 2013-08-01 BASELINE       1\n2 01-701-1028 XANOMELINE QD       2013-08-02 2014-01-06 WEEK 2        14\n3 01-701-1028 XANOMELINE QD       2014-01-07 2014-01-14 WEEK 24      168\n\n\nThis CDISC test exposure data is for a daily patch\n\nHere is our exposure data This is a daily patch"
  },
  {
    "objectID": "adnca_admiral.html#merge-adsl-with-ex",
    "href": "adnca_admiral.html#merge-adsl-with-ex",
    "title": "Programming CDISC ADaM ADNCA using R and {admiral}",
    "section": "Merge ADSL with EX",
    "text": "Merge ADSL with EX\n\nUse Function derive_vars_merged()\nKeep Only Non-Zero Dose\nConvert Dates to Numeric\nImpute missing times to 0:00*\nFunctions\n\nderive_vars_dtm()\nderive_vars_dtm_to_dt()\n\nDerive NFRLT based on VISITDY\n\n\nFirst we merge with ADSL"
  },
  {
    "objectID": "adnca_admiral.html#ex-merge-code",
    "href": "adnca_admiral.html#ex-merge-code",
    "title": "Programming CDISC ADaM ADNCA using R and {admiral}",
    "section": "EX Merge Code",
    "text": "EX Merge Code\n\n# ---- Get dosing information ----\n\nex &lt;- ex %&gt;%\n  derive_vars_merged(\n    dataset_add = adsl,\n    new_vars = adsl_vars,\n    by_vars = exprs(STUDYID, USUBJID)\n  ) %&gt;%\n  # Keep records with nonzero dose\n  filter(EXDOSE &gt; 0) %&gt;%\n  # Add time and set missing end date to start date\n  # Impute missing time to 00:00:00\n  # Derive Analysis Start and End Dates\n  derive_vars_dtm(\n    new_vars_prefix = \"AST\",\n    dtc = EXSTDTC,\n    time_imputation = \"00:00:00\"\n  ) %&gt;%\n  derive_vars_dtm(\n    new_vars_prefix = \"AEN\",\n    dtc = EXENDTC,\n    time_imputation = \"00:00:00\"\n  ) %&gt;%\n  # Derive event ID and nominal relative time from first dose (NFRLT)\n  mutate(\n    EVID = 1,\n    NFRLT = 24 * (VISITDY - 1), .after = USUBJID\n  ) %&gt;%\n  # Set missing end dates to start date\n  mutate(AENDTM = case_when(\n    is.na(AENDTM) ~ ASTDTM,\n    TRUE ~ AENDTM\n  )) %&gt;%\n  # Derive dates from date/times\n  derive_vars_dtm_to_dt(exprs(ASTDTM)) %&gt;%\n  derive_vars_dtm_to_dt(exprs(AENDTM))"
  },
  {
    "objectID": "adnca_admiral.html#ex-merge-output",
    "href": "adnca_admiral.html#ex-merge-output",
    "title": "Programming CDISC ADaM ADNCA using R and {admiral}",
    "section": "EX Merge Output",
    "text": "EX Merge Output\n\n\n# A tibble: 3 × 7\n  USUBJID     EXTRT      EXDOSFRQ ASTDT      AENDT      VISITDY NFRLT\n  &lt;chr&gt;       &lt;chr&gt;      &lt;chr&gt;    &lt;date&gt;     &lt;date&gt;       &lt;dbl&gt; &lt;dbl&gt;\n1 01-701-1028 XANOMELINE QD       2013-07-19 2013-08-01       1     0\n2 01-701-1028 XANOMELINE QD       2013-08-02 2014-01-06      14   312\n3 01-701-1028 XANOMELINE QD       2014-01-07 2014-01-14     168  4008\n\n\nNote numeric dates and Nominal Relative Time from Analyte First Dose (NFRLT)\n\nHere is the output of our merge Note Numeric Dates and Nominal Relative Time from Analyte First Dose NFRLT"
  },
  {
    "objectID": "adnca_admiral.html#expand-dosing-records",
    "href": "adnca_admiral.html#expand-dosing-records",
    "title": "Programming CDISC ADaM ADNCA using R and {admiral}",
    "section": "Expand Dosing Records",
    "text": "Expand Dosing Records\n\nNeed to add records between start date and end date\nUse function create_single_dose_dataset()\nNeed to also expand nominal relative time NFRLT\nFor example EXDOSFRQ = “QD” will expand NFRLT by 24 hours\nNew feature of function\n\n\nNext we need to expand dosing records between start date and end date"
  },
  {
    "objectID": "adnca_admiral.html#expansion-example-code",
    "href": "adnca_admiral.html#expansion-example-code",
    "title": "Programming CDISC ADaM ADNCA using R and {admiral}",
    "section": "Expansion Example Code",
    "text": "Expansion Example Code\n\n# ---- Expand dosing records between start and end dates ----\n\nex_exp &lt;- ex %&gt;%\n  create_single_dose_dataset(\n    dose_freq = EXDOSFRQ,\n    start_date = ASTDT,\n    start_datetime = ASTDTM,\n    end_date = AENDT,\n    end_datetime = AENDTM,\n    nominal_time = NFRLT,\n    lookup_table = dose_freq_lookup,\n    lookup_column = CDISC_VALUE,\n    keep_source_vars = exprs(\n      STUDYID, USUBJID, EVID, EXDOSFRQ, EXDOSFRM,\n      NFRLT, EXDOSE, EXDOSU, EXTRT, ASTDT, ASTDTM, AENDT, AENDTM,\n      VISIT, VISITNUM, VISITDY,\n      TRT01A, TRT01P, DOMAIN, EXSEQ, !!!adsl_vars\n    )\n  ) %&gt;%\n  # Derive AVISIT based on nominal relative time\n  mutate(\n    AVISITN = NFRLT %/% 24 + 1,\n    AVISIT = paste(\"Day\", AVISITN),\n    ADTM = ASTDTM,\n    DRUG = EXTRT,\n  ) %&gt;%\n  # Derive dates and times from datetimes\n  derive_vars_dtm_to_dt(exprs(ADTM)) %&gt;%\n  derive_vars_dtm_to_tm(exprs(ADTM)) %&gt;%\n  derive_vars_dtm_to_tm(exprs(ASTDTM)) %&gt;%\n  derive_vars_dtm_to_tm(exprs(AENDTM)) %&gt;%\n  derive_vars_dy(reference_date = TRTSDT, source_vars = exprs(ADT))\n\n\nHere is our expansion code Note new parameter of create_single_dose_dataset()"
  },
  {
    "objectID": "adnca_admiral.html#expansion-code-output",
    "href": "adnca_admiral.html#expansion-code-output",
    "title": "Programming CDISC ADaM ADNCA using R and {admiral}",
    "section": "Expansion Code Output",
    "text": "Expansion Code Output\n\n\n# A tibble: 20 × 6\n   USUBJID     DRUG       EXDOSFRQ ASTDT      AVISIT NFRLT\n   &lt;chr&gt;       &lt;chr&gt;      &lt;chr&gt;    &lt;date&gt;     &lt;chr&gt;  &lt;dbl&gt;\n 1 01-701-1028 XANOMELINE ONCE     2013-07-19 Day 1      0\n 2 01-701-1028 XANOMELINE ONCE     2013-07-20 Day 2     24\n 3 01-701-1028 XANOMELINE ONCE     2013-07-21 Day 3     48\n 4 01-701-1028 XANOMELINE ONCE     2013-07-22 Day 4     72\n 5 01-701-1028 XANOMELINE ONCE     2013-07-23 Day 5     96\n 6 01-701-1028 XANOMELINE ONCE     2013-07-24 Day 6    120\n 7 01-701-1028 XANOMELINE ONCE     2013-07-25 Day 7    144\n 8 01-701-1028 XANOMELINE ONCE     2013-07-26 Day 8    168\n 9 01-701-1028 XANOMELINE ONCE     2013-07-27 Day 9    192\n10 01-701-1028 XANOMELINE ONCE     2013-07-28 Day 10   216\n11 01-701-1028 XANOMELINE ONCE     2013-07-29 Day 11   240\n12 01-701-1028 XANOMELINE ONCE     2013-07-30 Day 12   264\n13 01-701-1028 XANOMELINE ONCE     2013-07-31 Day 13   288\n14 01-701-1028 XANOMELINE ONCE     2013-08-01 Day 14   312\n15 01-701-1028 XANOMELINE ONCE     2013-08-02 Day 14   312\n16 01-701-1028 XANOMELINE ONCE     2013-08-03 Day 15   336\n17 01-701-1028 XANOMELINE ONCE     2013-08-04 Day 16   360\n18 01-701-1028 XANOMELINE ONCE     2013-08-05 Day 17   384\n19 01-701-1028 XANOMELINE ONCE     2013-08-06 Day 18   408\n20 01-701-1028 XANOMELINE ONCE     2013-08-07 Day 19   432\n\n\nNote: NFRLT is expanded by 24 hours for each record AVISIT has values “Day 1”, “Day 2”, “Day 3”, etc.\n\nHere is the output of our expansion expansion Note that NFRLT is expanded by 24 hours for each record And we have updated AVISIT to “Day 1”, “Day 2”, etc."
  },
  {
    "objectID": "adnca_admiral.html#find-first-dose-and-calculate-fanldtm",
    "href": "adnca_admiral.html#find-first-dose-and-calculate-fanldtm",
    "title": "Programming CDISC ADaM ADNCA using R and {admiral}",
    "section": "Find First Dose and Calculate FANLDTM",
    "text": "Find First Dose and Calculate FANLDTM\n\nUse Function derive_vars_merged()\nParameter new_vars used to derive FANLDTM\nRecalculate AVISIT and AVISITN based on NFRLT for this study\n\nFANLDTM = First Datetime of Dose for Analyte\n\nNext we find our first dose datetime"
  },
  {
    "objectID": "adnca_admiral.html#first-dose-code",
    "href": "adnca_admiral.html#first-dose-code",
    "title": "Programming CDISC ADaM ADNCA using R and {admiral}",
    "section": "First Dose Code",
    "text": "First Dose Code\n\n# ---- Find first dose per treatment per subject ----\n# ---- Join with ADPC data and keep only subjects with dosing ----\n\nadpc &lt;- adpc %&gt;%\n  derive_vars_merged(\n    dataset_add = ex_exp,\n    filter_add = (EXDOSE &gt; 0 & !is.na(ADTM)),\n    new_vars = exprs(FANLDTM = ADTM),\n    order = exprs(ADTM, EXSEQ),\n    mode = \"first\",\n    by_vars = exprs(STUDYID, USUBJID, DRUG)\n  ) %&gt;%\n  filter(!is.na(FANLDTM)) %&gt;%\n  # Derive AVISIT from nominal relative time\n  mutate(\n    AVISITN = NFRLT %/% 24 + 1,\n    AVISIT = paste(\"Day\", AVISITN),\n  )\n\n\nHere is the code for first dose datetime"
  },
  {
    "objectID": "adnca_admiral.html#first-dose-output",
    "href": "adnca_admiral.html#first-dose-output",
    "title": "Programming CDISC ADaM ADNCA using R and {admiral}",
    "section": "First Dose Output",
    "text": "First Dose Output\n\n\n# A tibble: 14 × 5\n   USUBJID     FANLDTM             AVISIT ADTM                PCTPT           \n   &lt;chr&gt;       &lt;dttm&gt;              &lt;chr&gt;  &lt;dttm&gt;              &lt;chr&gt;           \n 1 01-701-1028 2013-07-19 00:00:00 Day 1  2013-07-18 23:30:00 Pre-dose        \n 2 01-701-1028 2013-07-19 00:00:00 Day 1  2013-07-19 00:05:00 5 Min Post-dose \n 3 01-701-1028 2013-07-19 00:00:00 Day 1  2013-07-19 00:30:00 30 Min Post-dose\n 4 01-701-1028 2013-07-19 00:00:00 Day 1  2013-07-19 01:00:00 1h Post-dose    \n 5 01-701-1028 2013-07-19 00:00:00 Day 1  2013-07-19 01:30:00 1.5h Post-dose  \n 6 01-701-1028 2013-07-19 00:00:00 Day 1  2013-07-19 02:00:00 2h Post-dose    \n 7 01-701-1028 2013-07-19 00:00:00 Day 1  2013-07-19 04:00:00 4h Post-dose    \n 8 01-701-1028 2013-07-19 00:00:00 Day 1  2013-07-19 06:00:00 6h Post-dose    \n 9 01-701-1028 2013-07-19 00:00:00 Day 1  2013-07-19 08:00:00 8h Post-dose    \n10 01-701-1028 2013-07-19 00:00:00 Day 1  2013-07-19 12:00:00 12h Post-dose   \n11 01-701-1028 2013-07-19 00:00:00 Day 1  2013-07-19 16:00:00 16h Post-dose   \n12 01-701-1028 2013-07-19 00:00:00 Day 2  2013-07-20 00:00:00 24h Post-dose   \n13 01-701-1028 2013-07-19 00:00:00 Day 2  2013-07-20 12:00:00 36h Post-dose   \n14 01-701-1028 2013-07-19 00:00:00 Day 3  2013-07-21 00:00:00 48h Post-dose   \n\n\nFANLDTM = First Datetime of Dose for Analyte\n\nHere is the output for first dose datetime Note FANLDTM = First Datetime of Dose for Analyte"
  },
  {
    "objectID": "adnca_admiral.html#find-reference-dose-dates-corresponding-to-pk-records",
    "href": "adnca_admiral.html#find-reference-dose-dates-corresponding-to-pk-records",
    "title": "Programming CDISC ADaM ADNCA using R and {admiral}",
    "section": "Find Reference Dose Dates Corresponding to PK Records",
    "text": "Find Reference Dose Dates Corresponding to PK Records\n\nUse Function derive_vars_joined()\nParameter filter_join used to set condition\n\n\nNext we find our reference dose dates corresponding to PK records"
  },
  {
    "objectID": "adnca_admiral.html#find-reference-dose-dates-code",
    "href": "adnca_admiral.html#find-reference-dose-dates-code",
    "title": "Programming CDISC ADaM ADNCA using R and {admiral}",
    "section": "Find Reference Dose Dates Code",
    "text": "Find Reference Dose Dates Code\n\n# ---- Find previous dose  ----\n# Use derive_vars_joined() for consistency with other variables\n# This is equivalent to derive_vars_last_dose() in this case\n\nadpc &lt;- adpc %&gt;%\n  derive_vars_joined(\n    dataset_add = ex_exp,\n    by_vars = exprs(USUBJID),\n    order = exprs(ADTM),\n    new_vars = exprs(\n      ADTM_prev = ADTM, EXDOSE_prev = EXDOSE, AVISIT_prev = AVISIT,\n      AENDTM_prev = AENDTM\n    ),\n    join_vars = exprs(ADTM),\n    join_type = \"all\",\n    filter_add = NULL,\n    filter_join = ADTM &gt; ADTM.join,\n    mode = \"last\",\n    check_type = \"none\"\n  )\n\n\nHere is our code for finding reference dose dates corresponding to PK records Note filter_join condition This is comparing the datetime of the concentration record with the datetime of the previous dose"
  },
  {
    "objectID": "adnca_admiral.html#find-reference-dose-dates-output",
    "href": "adnca_admiral.html#find-reference-dose-dates-output",
    "title": "Programming CDISC ADaM ADNCA using R and {admiral}",
    "section": "Find Reference Dose Dates Output",
    "text": "Find Reference Dose Dates Output\n\n\n# A tibble: 14 × 6\n   USUBJID     VISIT   ADTM                PCTPT ADTM_prev           AVISIT_prev\n   &lt;chr&gt;       &lt;chr&gt;   &lt;dttm&gt;              &lt;chr&gt; &lt;dttm&gt;              &lt;chr&gt;      \n 1 01-701-1028 BASELI… 2013-07-18 23:30:00 Pre-… NA                  &lt;NA&gt;       \n 2 01-701-1028 BASELI… 2013-07-19 00:05:00 5 Mi… 2013-07-19 00:00:00 Day 1      \n 3 01-701-1028 BASELI… 2013-07-19 00:30:00 30 M… 2013-07-19 00:00:00 Day 1      \n 4 01-701-1028 BASELI… 2013-07-19 01:00:00 1h P… 2013-07-19 00:00:00 Day 1      \n 5 01-701-1028 BASELI… 2013-07-19 01:30:00 1.5h… 2013-07-19 00:00:00 Day 1      \n 6 01-701-1028 BASELI… 2013-07-19 02:00:00 2h P… 2013-07-19 00:00:00 Day 1      \n 7 01-701-1028 BASELI… 2013-07-19 04:00:00 4h P… 2013-07-19 00:00:00 Day 1      \n 8 01-701-1028 BASELI… 2013-07-19 06:00:00 6h P… 2013-07-19 00:00:00 Day 1      \n 9 01-701-1028 BASELI… 2013-07-19 08:00:00 8h P… 2013-07-19 00:00:00 Day 1      \n10 01-701-1028 BASELI… 2013-07-19 12:00:00 12h … 2013-07-19 00:00:00 Day 1      \n11 01-701-1028 BASELI… 2013-07-19 16:00:00 16h … 2013-07-19 00:00:00 Day 1      \n12 01-701-1028 BASELI… 2013-07-20 00:00:00 24h … 2013-07-19 00:00:00 Day 1      \n13 01-701-1028 BASELI… 2013-07-20 12:00:00 36h … 2013-07-20 00:00:00 Day 2      \n14 01-701-1028 BASELI… 2013-07-21 00:00:00 48h … 2013-07-20 00:00:00 Day 2      \n\n\nADTM_prev is the datetime of the previous dose AVISIT_prev is the analysis visit of the previous dose\n\nHere the output from the reference dose dates Note ADTM_prev is the datetime for the previous dose"
  },
  {
    "objectID": "adnca_admiral.html#find-next-dose",
    "href": "adnca_admiral.html#find-next-dose",
    "title": "Programming CDISC ADaM ADNCA using R and {admiral}",
    "section": "Find Next Dose",
    "text": "Find Next Dose\n\n# ---- Find next dose  ----\n\nadpc &lt;- adpc %&gt;%\n  derive_vars_joined(\n    dataset_add = ex_exp,\n    by_vars = exprs(USUBJID),\n    order = exprs(ADTM),\n    new_vars = exprs(\n      ADTM_next = ADTM, EXDOSE_next = EXDOSE, AVISIT_next = AVISIT,\n      AENDTM_next = AENDTM\n    ),\n    join_vars = exprs(ADTM),\n    join_type = \"all\",\n    filter_add = NULL,\n    filter_join = ADTM &lt;= ADTM.join,\n    mode = \"first\",\n    check_type = \"none\"\n  )\n\n\nSimilarly we find the next dose Note ADTM_next is the datetime for the next dose"
  },
  {
    "objectID": "adnca_admiral.html#find-next-dose-output",
    "href": "adnca_admiral.html#find-next-dose-output",
    "title": "Programming CDISC ADaM ADNCA using R and {admiral}",
    "section": "Find Next Dose Output",
    "text": "Find Next Dose Output\n\n\n# A tibble: 14 × 6\n   USUBJID     VISIT   ADTM                PCTPT ADTM_next           AVISIT_next\n   &lt;chr&gt;       &lt;chr&gt;   &lt;dttm&gt;              &lt;chr&gt; &lt;dttm&gt;              &lt;chr&gt;      \n 1 01-701-1028 BASELI… 2013-07-18 23:30:00 Pre-… 2013-07-19 00:00:00 Day 1      \n 2 01-701-1028 BASELI… 2013-07-19 00:05:00 5 Mi… 2013-07-20 00:00:00 Day 2      \n 3 01-701-1028 BASELI… 2013-07-19 00:30:00 30 M… 2013-07-20 00:00:00 Day 2      \n 4 01-701-1028 BASELI… 2013-07-19 01:00:00 1h P… 2013-07-20 00:00:00 Day 2      \n 5 01-701-1028 BASELI… 2013-07-19 01:30:00 1.5h… 2013-07-20 00:00:00 Day 2      \n 6 01-701-1028 BASELI… 2013-07-19 02:00:00 2h P… 2013-07-20 00:00:00 Day 2      \n 7 01-701-1028 BASELI… 2013-07-19 04:00:00 4h P… 2013-07-20 00:00:00 Day 2      \n 8 01-701-1028 BASELI… 2013-07-19 06:00:00 6h P… 2013-07-20 00:00:00 Day 2      \n 9 01-701-1028 BASELI… 2013-07-19 08:00:00 8h P… 2013-07-20 00:00:00 Day 2      \n10 01-701-1028 BASELI… 2013-07-19 12:00:00 12h … 2013-07-20 00:00:00 Day 2      \n11 01-701-1028 BASELI… 2013-07-19 16:00:00 16h … 2013-07-20 00:00:00 Day 2      \n12 01-701-1028 BASELI… 2013-07-20 00:00:00 24h … 2013-07-20 00:00:00 Day 2      \n13 01-701-1028 BASELI… 2013-07-20 12:00:00 36h … 2013-07-21 00:00:00 Day 3      \n14 01-701-1028 BASELI… 2013-07-21 00:00:00 48h … 2013-07-21 00:00:00 Day 3      \n\n\nADTM_next is the datetime of the next dose\n\nHere is our output for finding next dose Note ADTM_next is the datetime for the next dose And AVISIT_next is the Analysis Visit for next dose"
  },
  {
    "objectID": "adnca_admiral.html#find-previous-nominal-dose",
    "href": "adnca_admiral.html#find-previous-nominal-dose",
    "title": "Programming CDISC ADaM ADNCA using R and {admiral}",
    "section": "Find Previous Nominal Dose",
    "text": "Find Previous Nominal Dose\n\n# ---- Find previous nominal time ----\n\nadpc &lt;- adpc %&gt;%\n  derive_vars_joined(\n    dataset_add = ex_exp,\n    by_vars = exprs(USUBJID),\n    order = exprs(NFRLT),\n    new_vars = exprs(NFRLT_prev = NFRLT),\n    join_vars = exprs(NFRLT),\n    join_type = \"all\",\n    filter_add = NULL,\n    filter_join = NFRLT &gt; NFRLT.join,\n    mode = \"last\",\n    check_type = \"none\"\n  )\n\n\nWe will do the same thing with nominal times In real studies you will find the nominal time does not always match the actual time"
  },
  {
    "objectID": "adnca_admiral.html#find-next-nominal-dose",
    "href": "adnca_admiral.html#find-next-nominal-dose",
    "title": "Programming CDISC ADaM ADNCA using R and {admiral}",
    "section": "Find Next Nominal Dose",
    "text": "Find Next Nominal Dose\n\n# ---- Find next nominal time ----\n\nadpc &lt;- adpc %&gt;%\n  derive_vars_joined(\n    dataset_add = ex_exp,\n    by_vars = exprs(USUBJID),\n    order = exprs(NFRLT),\n    new_vars = exprs(NFRLT_next = NFRLT),\n    join_vars = exprs(NFRLT),\n    join_type = \"all\",\n    filter_add = NULL,\n    filter_join = NFRLT &lt;= NFRLT.join,\n    mode = \"first\",\n    check_type = \"none\"\n  )\n\n\nHere we also find the Next Nominal Time"
  },
  {
    "objectID": "adnca_admiral.html#find-next-nominal-dose-output",
    "href": "adnca_admiral.html#find-next-nominal-dose-output",
    "title": "Programming CDISC ADaM ADNCA using R and {admiral}",
    "section": "Find Next Nominal Dose Output",
    "text": "Find Next Nominal Dose Output\n\n\n# A tibble: 14 × 5\n   USUBJID     NFRLT PCTPT            NFRLT_prev NFRLT_next\n   &lt;chr&gt;       &lt;dbl&gt; &lt;chr&gt;                 &lt;dbl&gt;      &lt;dbl&gt;\n 1 01-701-1028  0    Pre-dose                 NA          0\n 2 01-701-1028  0.08 5 Min Post-dose           0         24\n 3 01-701-1028  0.5  30 Min Post-dose          0         24\n 4 01-701-1028  1    1h Post-dose              0         24\n 5 01-701-1028  1.5  1.5h Post-dose            0         24\n 6 01-701-1028  2    2h Post-dose              0         24\n 7 01-701-1028  4    4h Post-dose              0         24\n 8 01-701-1028  6    6h Post-dose              0         24\n 9 01-701-1028  8    8h Post-dose              0         24\n10 01-701-1028 12    12h Post-dose             0         24\n11 01-701-1028 16    16h Post-dose             0         24\n12 01-701-1028 24    24h Post-dose             0         24\n13 01-701-1028 36    36h Post-dose            24         48\n14 01-701-1028 48    48h Post-dose            24         48\n\n\nNFRLT_prev is the nominal relative time from the previous dose NFRLT_next is the nominal relative time for the next dose\n\nHere is the output from these steps Note NFRLT_prev is the Nominal Relative Time from the Previous Dose NFRLT_next is the Nominal Relative Time for the Next Dose"
  },
  {
    "objectID": "adnca_admiral.html#relative",
    "href": "adnca_admiral.html#relative",
    "title": "Programming CDISC ADaM ADNCA using R and {admiral}",
    "section": "Combine PC and EX Records and Derive Relative Time Variables",
    "text": "Combine PC and EX Records and Derive Relative Time Variables\n\nInclude both dosing and concentration records\nUse function derive_vars_duration()\nCreate Actual Relative Time AFRLT\n\n\nNext we combine PC and EX records and derive relative time variables"
  },
  {
    "objectID": "adnca_admiral.html#combine-pc-and-ex-records-and-derive-relative-time-variables-code",
    "href": "adnca_admiral.html#combine-pc-and-ex-records-and-derive-relative-time-variables-code",
    "title": "Programming CDISC ADaM ADNCA using R and {admiral}",
    "section": "Combine PC and EX Records and Derive Relative Time Variables Code",
    "text": "Combine PC and EX Records and Derive Relative Time Variables Code\n\n# ---- Combine ADPC and EX data ----\n# Derive Relative Time Variables\n\n\nadpc &lt;- bind_rows(adpc, ex_exp) %&gt;%\n  group_by(USUBJID, DRUG) %&gt;%\n  mutate(\n    FANLDTM = min(FANLDTM, na.rm = TRUE),\n    min_NFRLT = min(NFRLT_prev, na.rm = TRUE),\n    maxdate = max(ADT[EVID == 0], na.rm = TRUE), .after = USUBJID\n  ) %&gt;%\n  arrange(USUBJID, ADTM) %&gt;%\n  ungroup() %&gt;%\n  filter(ADT &lt;= maxdate) %&gt;%\n  # Derive Actual Relative Time from First Dose (AFRLT)\n  derive_vars_duration(\n    new_var = AFRLT,\n    start_date = FANLDTM,\n    end_date = ADTM,\n    out_unit = \"hours\",\n    floor_in = FALSE,\n    add_one = FALSE\n  ) %&gt;%\n  # Derive Actual Relative Time from Reference Dose (ARRLT)\n  derive_vars_duration(\n    new_var = ARRLT,\n    start_date = ADTM_prev,\n    end_date = ADTM,\n    out_unit = \"hours\",\n    floor_in = FALSE,\n    add_one = FALSE\n  ) %&gt;%\n  # Derive Actual Relative Time from Next Dose (AXRLT not kept)\n  derive_vars_duration(\n    new_var = AXRLT,\n    start_date = ADTM_next,\n    end_date = ADTM,\n    out_unit = \"hours\",\n    floor_in = FALSE,\n    add_one = FALSE\n  ) %&gt;%\n  mutate(\n    ARRLT = case_when(\n      EVID == 1 ~ 0,\n      is.na(ARRLT) ~ AXRLT,\n      TRUE ~ ARRLT\n    ),\n\n    # Derive Reference Dose Date\n    PCRFTDTM = case_when(\n      EVID == 1 ~ ADTM,\n      is.na(ADTM_prev) ~ ADTM_next,\n      TRUE ~ ADTM_prev\n    )\n  ) %&gt;%\n  # Derive dates and times from datetimes\n  derive_vars_dtm_to_dt(exprs(FANLDTM)) %&gt;%\n  derive_vars_dtm_to_tm(exprs(FANLDTM)) %&gt;%\n  derive_vars_dtm_to_dt(exprs(PCRFTDTM)) %&gt;%\n  derive_vars_dtm_to_tm(exprs(PCRFTDTM))\n\n\nHere our code for combining PC and EX records and deriving relative time variables"
  },
  {
    "objectID": "adnca_admiral.html#derive-relative-time-output",
    "href": "adnca_admiral.html#derive-relative-time-output",
    "title": "Programming CDISC ADaM ADNCA using R and {admiral}",
    "section": "Derive Relative Time Output",
    "text": "Derive Relative Time Output\n\n\n# A tibble: 17 × 7\n   USUBJID     FANLDT     AVISIT PCTPT              AFRLT   ARRLT AXRLT\n   &lt;chr&gt;       &lt;date&gt;     &lt;chr&gt;  &lt;chr&gt;              &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;\n 1 01-701-1028 2013-07-19 Day 1  Pre-dose         -0.5    -0.5     -0.5\n 2 01-701-1028 2013-07-19 Day 1  &lt;NA&gt;              0       0       NA  \n 3 01-701-1028 2013-07-19 Day 1  5 Min Post-dose   0.0833  0.0833 -23.9\n 4 01-701-1028 2013-07-19 Day 1  30 Min Post-dose  0.5     0.5    -23.5\n 5 01-701-1028 2013-07-19 Day 1  1h Post-dose      1       1      -23  \n 6 01-701-1028 2013-07-19 Day 1  1.5h Post-dose    1.5     1.5    -22.5\n 7 01-701-1028 2013-07-19 Day 1  2h Post-dose      2       2      -22  \n 8 01-701-1028 2013-07-19 Day 1  4h Post-dose      4       4      -20  \n 9 01-701-1028 2013-07-19 Day 1  6h Post-dose      6       6      -18  \n10 01-701-1028 2013-07-19 Day 1  8h Post-dose      8       8      -16  \n11 01-701-1028 2013-07-19 Day 1  12h Post-dose    12      12      -12  \n12 01-701-1028 2013-07-19 Day 1  16h Post-dose    16      16       -8  \n13 01-701-1028 2013-07-19 Day 2  24h Post-dose    24      24        0  \n14 01-701-1028 2013-07-19 Day 2  &lt;NA&gt;             24       0       NA  \n15 01-701-1028 2013-07-19 Day 2  36h Post-dose    36      12      -12  \n16 01-701-1028 2013-07-19 Day 3  48h Post-dose    48      24        0  \n17 01-701-1028 2013-07-19 Day 3  &lt;NA&gt;             48       0       NA  \n\n\nAFRLT = Actual Relative Time from Analyte First Dose ARRLT = Actual Relative Time from Reference Dose\n\nHere the output after combining PC and EX records and deriving relative time variables Note AFRLT Actual Relative Time from Analyte First Dose ARRLT Actual Relative Time from Reference Dose We do not keep AXRLT but it is the actual time to the next dose"
  },
  {
    "objectID": "adnca_admiral.html#find-nominal-relative-times",
    "href": "adnca_admiral.html#find-nominal-relative-times",
    "title": "Programming CDISC ADaM ADNCA using R and {admiral}",
    "section": "Find Nominal Relative Times",
    "text": "Find Nominal Relative Times\n\nadpc &lt;- adpc %&gt;%\n  # Derive Nominal Relative Time from Reference Dose (NRRLT)\n  mutate(\n    NRRLT = case_when(\n      EVID == 1 ~ 0,\n      is.na(NFRLT_prev) ~ NFRLT - min_NFRLT,\n      TRUE ~ NFRLT - NFRLT_prev\n    ),\n    NXRLT = case_when(\n      EVID == 1 ~ 0,\n      TRUE ~ NFRLT - NFRLT_next\n    )\n  )\n\n\nNext we Find Nominal Relative Times"
  },
  {
    "objectID": "adnca_admiral.html#nominal-relative-times-output",
    "href": "adnca_admiral.html#nominal-relative-times-output",
    "title": "Programming CDISC ADaM ADNCA using R and {admiral}",
    "section": "Nominal Relative Times Output",
    "text": "Nominal Relative Times Output\n\n\n# A tibble: 17 × 6\n   USUBJID     AVISIT PCTPT            NFRLT NRRLT NXRLT\n   &lt;chr&gt;       &lt;chr&gt;  &lt;chr&gt;            &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n 1 01-701-1028 Day 1  Pre-dose          0     0      0  \n 2 01-701-1028 Day 1  &lt;NA&gt;              0     0      0  \n 3 01-701-1028 Day 1  5 Min Post-dose   0.08  0.08 -23.9\n 4 01-701-1028 Day 1  30 Min Post-dose  0.5   0.5  -23.5\n 5 01-701-1028 Day 1  1h Post-dose      1     1    -23  \n 6 01-701-1028 Day 1  1.5h Post-dose    1.5   1.5  -22.5\n 7 01-701-1028 Day 1  2h Post-dose      2     2    -22  \n 8 01-701-1028 Day 1  4h Post-dose      4     4    -20  \n 9 01-701-1028 Day 1  6h Post-dose      6     6    -18  \n10 01-701-1028 Day 1  8h Post-dose      8     8    -16  \n11 01-701-1028 Day 1  12h Post-dose    12    12    -12  \n12 01-701-1028 Day 1  16h Post-dose    16    16     -8  \n13 01-701-1028 Day 2  24h Post-dose    24    24      0  \n14 01-701-1028 Day 2  &lt;NA&gt;             24     0      0  \n15 01-701-1028 Day 2  36h Post-dose    36    12    -12  \n16 01-701-1028 Day 3  48h Post-dose    48    24      0  \n17 01-701-1028 Day 3  &lt;NA&gt;             48     0      0  \n\n\nNFRLT = Nominal Relative Time from Analyte First Dose NRRLT = Nominal Relative Time from Reference Dose\n\nHere is the output from derviing nominal relative times Note NFRLT Nominal Relative Time from Analyte First Dose NRRLT Nominal Relative Time from Reference Dose"
  },
  {
    "objectID": "adnca_admiral.html#derive-analysis-variables",
    "href": "adnca_admiral.html#derive-analysis-variables",
    "title": "Programming CDISC ADaM ADNCA using R and {admiral}",
    "section": "Derive Analysis Variables",
    "text": "Derive Analysis Variables\n\nadpc &lt;- adpc %&gt;%\n  mutate(\n    ATPTN = case_when(\n      EVID == 1 ~ 0,\n      TRUE ~ PCTPTNUM\n    ),\n    ATPT = case_when(\n      EVID == 1 ~ \"Dose\",\n      TRUE ~ PCTPT\n    ),\n    ATPTREF = case_when(\n      EVID == 1 ~ AVISIT,\n      is.na(AVISIT_prev) ~ AVISIT_next,\n      TRUE ~ AVISIT_prev\n    ),\n    # Derive baseline flag for pre-dose records\n    ABLFL = case_when(\n      ATPT == \"Pre-dose\" ~ \"Y\",\n      TRUE ~ NA_character_\n    ),\n    # Derive BASETYPE\n    BASETYPE = paste(ATPTREF, \"Baseline\"),\n\n    # Derive Actual Dose\n    DOSEA = case_when(\n      EVID == 1 ~ EXDOSE,\n      is.na(EXDOSE_prev) ~ EXDOSE_next,\n      TRUE ~ EXDOSE_prev\n    ),\n    # Derive Planned Dose\n    DOSEP = case_when(\n      TRT01P == \"Xanomeline High Dose\" ~ 81,\n      TRT01P == \"Xanomeline Low Dose\" ~ 54\n    ),\n    DOSEU = \"mg\",\n  ) %&gt;%\n  mutate(\n    FRLTU = \"h\",\n    RRLTU = \"h\",\n    PARAMCD = coalesce(PCTESTCD, \"DOSE\"),\n    ALLOQ = PCLLOQ,\n    AVAL = case_when(\n      EVID == 1 ~ EXDOSE,\n      PCSTRESC == \"&lt;BLQ\" & NFRLT == 0 ~ 0,\n      PCSTRESC == \"&lt;BLQ\" & NFRLT &gt; 0 ~ 0.5 * ALLOQ,\n      TRUE ~ PCSTRESN\n    ),\n    AVALU = case_when(\n      EVID == 1 ~ EXDOSU,\n      TRUE ~ PCSTRESU\n    ),\n    AVALCAT1 = if_else(PCSTRESC == \"&lt;BLQ\", PCSTRESC, prettyNum(signif(AVAL, digits = 3))),\n  ) %&gt;%\n  # Add SRCSEQ\n  mutate(\n    SRCDOM = DOMAIN,\n    SRCVAR = \"SEQ\",\n    SRCSEQ = coalesce(PCSEQ, EXSEQ)\n  )\n\n\nNext we derive an number of analysis variables Including ATPTREF Analysis Timepoint Reference and AVAL Analysis Value"
  },
  {
    "objectID": "adnca_admiral.html#analysis-variable-output",
    "href": "adnca_admiral.html#analysis-variable-output",
    "title": "Programming CDISC ADaM ADNCA using R and {admiral}",
    "section": "Analysis Variable Output",
    "text": "Analysis Variable Output\n\n\n# A tibble: 17 × 8\n   USUBJID     NFRLT AVISIT ATPT             ABLFL ATPTREF    AVAL AVALCAT1\n   &lt;chr&gt;       &lt;dbl&gt; &lt;chr&gt;  &lt;chr&gt;            &lt;chr&gt; &lt;chr&gt;     &lt;dbl&gt; &lt;chr&gt;   \n 1 01-701-1028  0    Day 1  Pre-dose         Y     Day 1    0      &lt;BLQ    \n 2 01-701-1028  0    Day 1  Dose             &lt;NA&gt;  Day 1   54      &lt;NA&gt;    \n 3 01-701-1028  0.08 Day 1  5 Min Post-dose  &lt;NA&gt;  Day 1    0.102  0.102   \n 4 01-701-1028  0.5  Day 1  30 Min Post-dose &lt;NA&gt;  Day 1    0.547  0.547   \n 5 01-701-1028  1    Day 1  1h Post-dose     &lt;NA&gt;  Day 1    0.925  0.925   \n 6 01-701-1028  1.5  Day 1  1.5h Post-dose   &lt;NA&gt;  Day 1    1.19   1.19    \n 7 01-701-1028  2    Day 1  2h Post-dose     &lt;NA&gt;  Day 1    1.37   1.37    \n 8 01-701-1028  4    Day 1  4h Post-dose     &lt;NA&gt;  Day 1    1.68   1.68    \n 9 01-701-1028  6    Day 1  6h Post-dose     &lt;NA&gt;  Day 1    1.76   1.76    \n10 01-701-1028  8    Day 1  8h Post-dose     &lt;NA&gt;  Day 1    1.77   1.77    \n11 01-701-1028 12    Day 1  12h Post-dose    &lt;NA&gt;  Day 1    0.495  0.495   \n12 01-701-1028 16    Day 1  16h Post-dose    &lt;NA&gt;  Day 1    0.138  0.138   \n13 01-701-1028 24    Day 2  24h Post-dose    &lt;NA&gt;  Day 1    0.0107 0.0107  \n14 01-701-1028 24    Day 2  Dose             &lt;NA&gt;  Day 2   54      &lt;NA&gt;    \n15 01-701-1028 36    Day 2  36h Post-dose    &lt;NA&gt;  Day 2    0.005  &lt;BLQ    \n16 01-701-1028 48    Day 3  48h Post-dose    &lt;NA&gt;  Day 2    0.005  &lt;BLQ    \n17 01-701-1028 48    Day 3  Dose             &lt;NA&gt;  Day 3   54      &lt;NA&gt;    \n\n\nATPT Analysis Timepoint ATPTREF Analysis Timepoint Reference AVAL Analysis Value\n\nHere is the output of these derivations Note ATPT Analysis Timepoint ATPTREF Analysis Timepoint Reference AVAL Analysis Value"
  },
  {
    "objectID": "adnca_admiral.html#create-duplicated-records-for-analysis",
    "href": "adnca_admiral.html#create-duplicated-records-for-analysis",
    "title": "Programming CDISC ADaM ADNCA using R and {admiral}",
    "section": "Create Duplicated Records for Analysis",
    "text": "Create Duplicated Records for Analysis\n\nUse One Record in More than One Way\nRecord may be both “24 Hour Post-Dose” and “Pre-Dose”\nCreate DTYPE = “COPY” Records\nOriginal PCSEQ is retained\nChange “24h Post-dose” to “Pre-dose”\nABLFL is set to “Y”\n\n\nWe will create duplicated records for analysis “24 Hour Post-Dose” will also become “Pre-Dose”"
  },
  {
    "objectID": "adnca_admiral.html#duplicated-records-for-analysis-code",
    "href": "adnca_admiral.html#duplicated-records-for-analysis-code",
    "title": "Programming CDISC ADaM ADNCA using R and {admiral}",
    "section": "Duplicated Records for Analysis Code",
    "text": "Duplicated Records for Analysis Code\n\n# ---- Create DTYPE copy records ----\n\ndtype &lt;- adpc %&gt;%\n  filter(NFRLT &gt; 0 & NXRLT == 0 & EVID == 0 & !is.na(AVISIT_next)) %&gt;%\n  select(-PCRFTDT, -PCRFTTM) %&gt;%\n  # Re-derive variables in for DTYPE copy records\n  mutate(\n    ABLFL = NA_character_,\n    ATPTREF = AVISIT_next,\n    ARRLT = AXRLT,\n    NRRLT = NXRLT,\n    PCRFTDTM = ADTM_next,\n    DOSEA = EXDOSE_next,\n    BASETYPE = paste(AVISIT_next, \"Baseline\"),\n    ATPT = \"Pre-dose\",\n    ATPTN = NFRLT,\n    ABLFL = \"Y\",\n    DTYPE = \"COPY\"\n  ) %&gt;%\n  derive_vars_dtm_to_dt(exprs(PCRFTDTM)) %&gt;%\n  derive_vars_dtm_to_tm(exprs(PCRFTDTM))\n\n\nHere is the code for the duplicated records ATPT is changed to “Pre-dose” Note DTYPE = “COPY”"
  },
  {
    "objectID": "adnca_admiral.html#duplicated-records-for-analysis-output",
    "href": "adnca_admiral.html#duplicated-records-for-analysis-output",
    "title": "Programming CDISC ADaM ADNCA using R and {admiral}",
    "section": "Duplicated Records for Analysis Output",
    "text": "Duplicated Records for Analysis Output\n\n\n# A tibble: 2 × 8\n  USUBJID     DTYPE BASETYPE       ATPT     NFRLT NRRLT AFRLT ARRLT\n  &lt;chr&gt;       &lt;chr&gt; &lt;chr&gt;          &lt;chr&gt;    &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1 01-701-1028 COPY  Day 2 Baseline Pre-dose    24     0    24     0\n2 01-701-1028 COPY  Day 3 Baseline Pre-dose    48     0    48     0\n\n\nNote that NRRLT and ARRLT equal zero for next dose\n\nHere output for duplicated records ATPT is changed to “Pre-dose” Note DTYPE = “COPY” Note that NRRLT and ARRLT equal zero for next dose"
  },
  {
    "objectID": "adnca_admiral.html#combine-adpc-data-with-duplicated-records",
    "href": "adnca_admiral.html#combine-adpc-data-with-duplicated-records",
    "title": "Programming CDISC ADaM ADNCA using R and {admiral}",
    "section": "Combine ADPC data with Duplicated Records",
    "text": "Combine ADPC data with Duplicated Records\n\n# ---- Combine original records and DTYPE copy records ----\n\nadpc &lt;- bind_rows(adpc, dtype) %&gt;%\n  arrange(STUDYID, USUBJID, BASETYPE, ADTM, NFRLT) %&gt;%\n  mutate(\n    # Derive MRRLT, ANL01FL and ANL02FL\n    MRRLT = if_else(ARRLT &lt; 0, 0, ARRLT),\n    ANL01FL = \"Y\",\n    ANL02FL = if_else(is.na(DTYPE), \"Y\", NA_character_),\n  )\n\n\nNow we combine the duplicated records with the original records"
  },
  {
    "objectID": "adnca_admiral.html#combine-adpc-output",
    "href": "adnca_admiral.html#combine-adpc-output",
    "title": "Programming CDISC ADaM ADNCA using R and {admiral}",
    "section": "Combine ADPC Output",
    "text": "Combine ADPC Output\n\n\n# A tibble: 19 × 5\n   USUBJID     BASETYPE       ATPT             DTYPE   ARRLT\n   &lt;chr&gt;       &lt;chr&gt;          &lt;chr&gt;            &lt;chr&gt;   &lt;dbl&gt;\n 1 01-701-1028 Day 1 Baseline Pre-dose         &lt;NA&gt;  -0.5   \n 2 01-701-1028 Day 1 Baseline Dose             &lt;NA&gt;   0     \n 3 01-701-1028 Day 1 Baseline 5 Min Post-dose  &lt;NA&gt;   0.0833\n 4 01-701-1028 Day 1 Baseline 30 Min Post-dose &lt;NA&gt;   0.5   \n 5 01-701-1028 Day 1 Baseline 1h Post-dose     &lt;NA&gt;   1     \n 6 01-701-1028 Day 1 Baseline 1.5h Post-dose   &lt;NA&gt;   1.5   \n 7 01-701-1028 Day 1 Baseline 2h Post-dose     &lt;NA&gt;   2     \n 8 01-701-1028 Day 1 Baseline 4h Post-dose     &lt;NA&gt;   4     \n 9 01-701-1028 Day 1 Baseline 6h Post-dose     &lt;NA&gt;   6     \n10 01-701-1028 Day 1 Baseline 8h Post-dose     &lt;NA&gt;   8     \n11 01-701-1028 Day 1 Baseline 12h Post-dose    &lt;NA&gt;  12     \n12 01-701-1028 Day 1 Baseline 16h Post-dose    &lt;NA&gt;  16     \n13 01-701-1028 Day 1 Baseline 24h Post-dose    &lt;NA&gt;  24     \n14 01-701-1028 Day 2 Baseline Dose             &lt;NA&gt;   0     \n15 01-701-1028 Day 2 Baseline Pre-dose         COPY   0     \n16 01-701-1028 Day 2 Baseline 36h Post-dose    &lt;NA&gt;  12     \n17 01-701-1028 Day 2 Baseline 48h Post-dose    &lt;NA&gt;  24     \n18 01-701-1028 Day 3 Baseline Dose             &lt;NA&gt;   0     \n19 01-701-1028 Day 3 Baseline Pre-dose         COPY   0     \n\n\n\nHere is output from combined records Note DTYPE = “COPY” records"
  },
  {
    "objectID": "adnca_admiral.html#calculate-baseline-and-change-from-baseline",
    "href": "adnca_admiral.html#calculate-baseline-and-change-from-baseline",
    "title": "Programming CDISC ADaM ADNCA using R and {admiral}",
    "section": "Calculate Baseline and Change from Baseline",
    "text": "Calculate Baseline and Change from Baseline\n\n# ---- Calculate BASE and Change from Baseline ----\n\nadpc &lt;- adpc %&gt;%\n  # Derive BASE\n  derive_var_base(\n    by_vars = exprs(STUDYID, USUBJID, PARAMCD, BASETYPE),\n    source_var = AVAL,\n    new_var = BASE,\n    filter = ABLFL == \"Y\"\n  )\n\nadpc &lt;- derive_var_chg(adpc)\n\nUse functions derive_var_base() and derive_var_chg()\n\nNow we calculate baseline and change from baseline"
  },
  {
    "objectID": "adnca_admiral.html#baseline-and-change-output",
    "href": "adnca_admiral.html#baseline-and-change-output",
    "title": "Programming CDISC ADaM ADNCA using R and {admiral}",
    "section": "Baseline and Change Output",
    "text": "Baseline and Change Output\n\n\n# A tibble: 19 × 10\n   USUBJID    BASETYPE DTYPE AVISIT ATPT     AVAL NRRLT   ARRLT    BASE      CHG\n   &lt;chr&gt;      &lt;chr&gt;    &lt;chr&gt; &lt;chr&gt;  &lt;chr&gt;   &lt;dbl&gt; &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt;    &lt;dbl&gt;\n 1 01-701-10… Day 1 B… &lt;NA&gt;  Day 1  Pre-…  0       0    -0.5     0       0      \n 2 01-701-10… Day 1 B… &lt;NA&gt;  Day 1  Dose  54       0     0      NA      NA      \n 3 01-701-10… Day 1 B… &lt;NA&gt;  Day 1  5 Mi…  0.102   0.08  0.0833  0       0.102  \n 4 01-701-10… Day 1 B… &lt;NA&gt;  Day 1  30 M…  0.547   0.5   0.5     0       0.547  \n 5 01-701-10… Day 1 B… &lt;NA&gt;  Day 1  1h P…  0.925   1     1       0       0.925  \n 6 01-701-10… Day 1 B… &lt;NA&gt;  Day 1  1.5h…  1.19    1.5   1.5     0       1.19   \n 7 01-701-10… Day 1 B… &lt;NA&gt;  Day 1  2h P…  1.37    2     2       0       1.37   \n 8 01-701-10… Day 1 B… &lt;NA&gt;  Day 1  4h P…  1.68    4     4       0       1.68   \n 9 01-701-10… Day 1 B… &lt;NA&gt;  Day 1  6h P…  1.76    6     6       0       1.76   \n10 01-701-10… Day 1 B… &lt;NA&gt;  Day 1  8h P…  1.77    8     8       0       1.77   \n11 01-701-10… Day 1 B… &lt;NA&gt;  Day 1  12h …  0.495  12    12       0       0.495  \n12 01-701-10… Day 1 B… &lt;NA&gt;  Day 1  16h …  0.138  16    16       0       0.138  \n13 01-701-10… Day 1 B… &lt;NA&gt;  Day 2  24h …  0.0107 24    24       0       0.0107 \n14 01-701-10… Day 2 B… &lt;NA&gt;  Day 2  Dose  54       0     0      NA      NA      \n15 01-701-10… Day 2 B… COPY  Day 2  Pre-…  0.0107  0     0       0.0107  0      \n16 01-701-10… Day 2 B… &lt;NA&gt;  Day 2  36h …  0.005  12    12       0.0107 -0.00571\n17 01-701-10… Day 2 B… &lt;NA&gt;  Day 3  48h …  0.005  24    24       0.0107 -0.00571\n18 01-701-10… Day 3 B… &lt;NA&gt;  Day 3  Dose  54       0     0      NA      NA      \n19 01-701-10… Day 3 B… COPY  Day 3  Pre-…  0.005   0     0       0.005   0      \n\n\n\nNote BASE and CHG now"
  },
  {
    "objectID": "adnca_admiral.html#add-aseq",
    "href": "adnca_admiral.html#add-aseq",
    "title": "Programming CDISC ADaM ADNCA using R and {admiral}",
    "section": "Add ASEQ",
    "text": "Add ASEQ\n\n# ---- Add ASEQ ----\n\nadpc &lt;- adpc %&gt;%\n  # Calculate ASEQ\n  derive_var_obs_number(\n    new_var = ASEQ,\n    by_vars = exprs(STUDYID, USUBJID),\n    order = exprs(ADTM, BASETYPE, EVID, AVISITN, ATPTN, DTYPE),\n    check_type = \"error\"\n  ) %&gt;%\n  # Remove temporary variables\n  select(\n    -DOMAIN, -PCSEQ, -starts_with(\"orig\"), -starts_with(\"min\"),\n    -starts_with(\"max\"), -starts_with(\"EX\"), -ends_with(\"next\"),\n    -ends_with(\"prev\"), -DRUG, -EVID, -AXRLT, -NXRLT, -VISITDY\n  ) %&gt;%\n  # Derive PARAM and PARAMN\n  derive_vars_merged(dataset_add = select(param_lookup, -PCTESTCD), by_vars = exprs(PARAMCD))\n\nUse function derive_var_obs_number()\n\nHere we add ASEQ"
  },
  {
    "objectID": "adnca_admiral.html#aseq-ouput",
    "href": "adnca_admiral.html#aseq-ouput",
    "title": "Programming CDISC ADaM ADNCA using R and {admiral}",
    "section": "ASEQ Ouput",
    "text": "ASEQ Ouput\n\n\n# A tibble: 19 × 11\n   USUBJID BASETYPE DTYPE AVISIT ATPT     AVAL NFRLT NRRLT   AFRLT   ARRLT  ASEQ\n   &lt;chr&gt;   &lt;chr&gt;    &lt;chr&gt; &lt;chr&gt;  &lt;chr&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt; &lt;int&gt;\n 1 01-701… Day 1 B… &lt;NA&gt;  Day 1  Pre-…  0       0     0    -0.5    -0.5        1\n 2 01-701… Day 1 B… &lt;NA&gt;  Day 1  Dose  54       0     0     0       0          2\n 3 01-701… Day 1 B… &lt;NA&gt;  Day 1  5 Mi…  0.102   0.08  0.08  0.0833  0.0833     3\n 4 01-701… Day 1 B… &lt;NA&gt;  Day 1  30 M…  0.547   0.5   0.5   0.5     0.5        4\n 5 01-701… Day 1 B… &lt;NA&gt;  Day 1  1h P…  0.925   1     1     1       1          5\n 6 01-701… Day 1 B… &lt;NA&gt;  Day 1  1.5h…  1.19    1.5   1.5   1.5     1.5        6\n 7 01-701… Day 1 B… &lt;NA&gt;  Day 1  2h P…  1.37    2     2     2       2          7\n 8 01-701… Day 1 B… &lt;NA&gt;  Day 1  4h P…  1.68    4     4     4       4          8\n 9 01-701… Day 1 B… &lt;NA&gt;  Day 1  6h P…  1.76    6     6     6       6          9\n10 01-701… Day 1 B… &lt;NA&gt;  Day 1  8h P…  1.77    8     8     8       8         10\n11 01-701… Day 1 B… &lt;NA&gt;  Day 1  12h …  0.495  12    12    12      12         11\n12 01-701… Day 1 B… &lt;NA&gt;  Day 1  16h …  0.138  16    16    16      16         12\n13 01-701… Day 1 B… &lt;NA&gt;  Day 2  24h …  0.0107 24    24    24      24         13\n14 01-701… Day 2 B… COPY  Day 2  Pre-…  0.0107 24     0    24       0         14\n15 01-701… Day 2 B… &lt;NA&gt;  Day 2  Dose  54      24     0    24       0         15\n16 01-701… Day 2 B… &lt;NA&gt;  Day 2  36h …  0.005  36    12    36      12         16\n17 01-701… Day 2 B… &lt;NA&gt;  Day 3  48h …  0.005  48    24    48      24         17\n18 01-701… Day 3 B… COPY  Day 3  Pre-…  0.005  48     0    48       0         18\n19 01-701… Day 3 B… &lt;NA&gt;  Day 3  Dose  54      48     0    48       0         19\n\n\n\nNote ASEQ"
  },
  {
    "objectID": "adnca_admiral.html#add-additional-baseline-variables",
    "href": "adnca_admiral.html#add-additional-baseline-variables",
    "title": "Programming CDISC ADaM ADNCA using R and {admiral}",
    "section": "Add Additional Baseline Variables",
    "text": "Add Additional Baseline Variables\n\nDerive additional baseline values from VS\nBaseline height HTBL and weight WTBL\nCompute body mass index (BMI) with compute_bmi()\n\n\nNow we add additional baselines from vital signs"
  },
  {
    "objectID": "adnca_admiral.html#additional-baseline-variables-code",
    "href": "adnca_admiral.html#additional-baseline-variables-code",
    "title": "Programming CDISC ADaM ADNCA using R and {admiral}",
    "section": "Additional Baseline Variables Code",
    "text": "Additional Baseline Variables Code\n\n# Derive additional baselines from VS\nadpc &lt;- adpc %&gt;%\n  derive_vars_merged(\n    dataset_add = vs,\n    filter_add = VSTESTCD == \"HEIGHT\",\n    by_vars = exprs(STUDYID, USUBJID),\n    new_vars = exprs(HTBL = VSSTRESN, HTBLU = VSSTRESU)\n  ) %&gt;%\n  derive_vars_merged(\n    dataset_add = vs,\n    filter_add = VSTESTCD == \"WEIGHT\" & VSBLFL == \"Y\",\n    by_vars = exprs(STUDYID, USUBJID),\n    new_vars = exprs(WTBL = VSSTRESN, WTBLU = VSSTRESU)\n  ) %&gt;%\n  mutate(\n    BMIBL = compute_bmi(height = HTBL, weight = WTBL),\n    BMIBLU = \"kg/m^2\"\n  )\n\nUse derive_vars_merged() function\n\nHere is the code for adding baselines from vital signs"
  },
  {
    "objectID": "adnca_admiral.html#additional-baseline-output",
    "href": "adnca_admiral.html#additional-baseline-output",
    "title": "Programming CDISC ADaM ADNCA using R and {admiral}",
    "section": "Additional Baseline Output",
    "text": "Additional Baseline Output\n\n\n# A tibble: 19 × 10\n   USUBJID      HTBL HTBLU  WTBL WTBLU BMIBL BMIBLU BASETYPE       ATPT     AVAL\n   &lt;chr&gt;       &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt;  &lt;chr&gt;          &lt;chr&gt;   &lt;dbl&gt;\n 1 01-701-1028  178. cm     99.3 kg     31.4 kg/m^2 Day 1 Baseline Pre-…  0     \n 2 01-701-1028  178. cm     99.3 kg     31.4 kg/m^2 Day 1 Baseline Dose  54     \n 3 01-701-1028  178. cm     99.3 kg     31.4 kg/m^2 Day 1 Baseline 5 Mi…  0.102 \n 4 01-701-1028  178. cm     99.3 kg     31.4 kg/m^2 Day 1 Baseline 30 M…  0.547 \n 5 01-701-1028  178. cm     99.3 kg     31.4 kg/m^2 Day 1 Baseline 1h P…  0.925 \n 6 01-701-1028  178. cm     99.3 kg     31.4 kg/m^2 Day 1 Baseline 1.5h…  1.19  \n 7 01-701-1028  178. cm     99.3 kg     31.4 kg/m^2 Day 1 Baseline 2h P…  1.37  \n 8 01-701-1028  178. cm     99.3 kg     31.4 kg/m^2 Day 1 Baseline 4h P…  1.68  \n 9 01-701-1028  178. cm     99.3 kg     31.4 kg/m^2 Day 1 Baseline 6h P…  1.76  \n10 01-701-1028  178. cm     99.3 kg     31.4 kg/m^2 Day 1 Baseline 8h P…  1.77  \n11 01-701-1028  178. cm     99.3 kg     31.4 kg/m^2 Day 1 Baseline 12h …  0.495 \n12 01-701-1028  178. cm     99.3 kg     31.4 kg/m^2 Day 1 Baseline 16h …  0.138 \n13 01-701-1028  178. cm     99.3 kg     31.4 kg/m^2 Day 1 Baseline 24h …  0.0107\n14 01-701-1028  178. cm     99.3 kg     31.4 kg/m^2 Day 2 Baseline Pre-…  0.0107\n15 01-701-1028  178. cm     99.3 kg     31.4 kg/m^2 Day 2 Baseline Dose  54     \n16 01-701-1028  178. cm     99.3 kg     31.4 kg/m^2 Day 2 Baseline 36h …  0.005 \n17 01-701-1028  178. cm     99.3 kg     31.4 kg/m^2 Day 2 Baseline 48h …  0.005 \n18 01-701-1028  178. cm     99.3 kg     31.4 kg/m^2 Day 3 Baseline Pre-…  0.005 \n19 01-701-1028  178. cm     99.3 kg     31.4 kg/m^2 Day 3 Baseline Dose  54     \n\n\n\nHere are the additional baselines"
  },
  {
    "objectID": "adnca_admiral.html#add-the-adsl-variables",
    "href": "adnca_admiral.html#add-the-adsl-variables",
    "title": "Programming CDISC ADaM ADNCA using R and {admiral}",
    "section": "Add the ADSL variables",
    "text": "Add the ADSL variables\n\n# Add all ADSL variables\nadpc &lt;- adpc %&gt;%\n  derive_vars_merged(\n    dataset_add = select(adsl, !!!negate_vars(adsl_vars)),\n    by_vars = exprs(STUDYID, USUBJID)\n  )\n\nUse derive_vars_merged() function\n\nHere is the code for merging ADSL"
  },
  {
    "objectID": "adnca_admiral.html#attributes",
    "href": "adnca_admiral.html#attributes",
    "title": "Programming CDISC ADaM ADNCA using R and {admiral}",
    "section": "Add Labels and Attributes",
    "text": "Add Labels and Attributes\n\nmetacore: manage metadata\nmetatools: apply metadata to dataset\nxportr: export transport file\n\n\nAdditional packages can be used for managing metadata We can use XPORTR to export a v5 transport file"
  },
  {
    "objectID": "adnca_admiral.html#example-script",
    "href": "adnca_admiral.html#example-script",
    "title": "Programming CDISC ADaM ADNCA using R and {admiral}",
    "section": "Example Script",
    "text": "Example Script\n\nADPC ad_adpc.R\nCall use_ad_template(\"adpc\")"
  },
  {
    "objectID": "adnca_admiral.html#conclusions",
    "href": "adnca_admiral.html#conclusions",
    "title": "Programming CDISC ADaM ADNCA using R and {admiral}",
    "section": "Conclusions",
    "text": "Conclusions\n\n{admiral} Functionality is Suitable for PK Data Programming\nMinimal Updates to Existing Functions Required\nAdditional Functions Could be Added if Needed\nProgramming Flow is Consistent with other ADaMs\nExtensible to Other PK Programming such as ADPPK"
  },
  {
    "objectID": "adnca_admiral.html#thank-you",
    "href": "adnca_admiral.html#thank-you",
    "title": "Programming CDISC ADaM ADNCA using R and {admiral}",
    "section": "Thank You",
    "text": "Thank You\n\n{admiral} Team\nRoche and Genentech Colleagues\nNavitas Data Sciences Colleagues"
  },
  {
    "objectID": "adnca_admiral.html#questions-and-answers",
    "href": "adnca_admiral.html#questions-and-answers",
    "title": "Programming CDISC ADaM ADNCA using R and {admiral}",
    "section": "Questions and Answers",
    "text": "Questions and Answers"
  },
  {
    "objectID": "adnca_admiral.html#contact",
    "href": "adnca_admiral.html#contact",
    "title": "Programming CDISC ADaM ADNCA using R and {admiral}",
    "section": "Contact",
    "text": "Contact\n\nJeff Dickinson\nemail: jeff.dickinson@navitaslifesciences.com\nGitHub: jeffreyad\nSlack Pharmaverse Channel"
  }
]